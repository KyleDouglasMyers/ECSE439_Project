/*
 * generated by Xtext 2.26.0
 */
package org.xtext.airlineregistration.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AirGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Model");
		private final Assignment cEntitiesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntitiesEntityParserRuleCall_0 = (RuleCall)cEntitiesAssignment.eContents().get(0);
		
		//Model :
		//    entities+=Entity*;
		@Override public ParserRule getRule() { return rule; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment() { return cEntitiesAssignment; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_0() { return cEntitiesEntityParserRuleCall_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAirportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAirlineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFlightParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cScheduleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEmployeeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Entity:
		//    Airport | Airline | Flight | Schedule | Employee
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Airport | Airline | Flight | Schedule | Employee
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Airport
		public RuleCall getAirportParserRuleCall_0() { return cAirportParserRuleCall_0; }
		
		//Airline
		public RuleCall getAirlineParserRuleCall_1() { return cAirlineParserRuleCall_1; }
		
		//Flight
		public RuleCall getFlightParserRuleCall_2() { return cFlightParserRuleCall_2; }
		
		//Schedule
		public RuleCall getScheduleParserRuleCall_3() { return cScheduleParserRuleCall_3; }
		
		//Employee
		public RuleCall getEmployeeParserRuleCall_4() { return cEmployeeParserRuleCall_4; }
	}
	public class AirportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Airport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAirportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeIDTerminalRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cLocationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocationSTRINGTerminalRuleCall_3_0 = (RuleCall)cLocationAssignment_3.eContents().get(0);
		
		//Airport :
		//    //Example: Airport YUL 'Pierre Trudeau'
		//    'Airport' code=ID name=STRING location=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////Example: Airport YUL 'Pierre Trudeau'
		//'Airport' code=ID name=STRING location=STRING
		public Group getGroup() { return cGroup; }
		
		////Example: Airport YUL 'Pierre Trudeau'
		//'Airport'
		public Keyword getAirportKeyword_0() { return cAirportKeyword_0; }
		
		//code=ID
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//ID
		public RuleCall getCodeIDTerminalRuleCall_1_0() { return cCodeIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//location=STRING
		public Assignment getLocationAssignment_3() { return cLocationAssignment_3; }
		
		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_3_0() { return cLocationSTRINGTerminalRuleCall_3_0; }
	}
	public class AirlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Airline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAirlineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//Airline:
		//    //Example: Airline AirCanada 'flights out of canada'
		//    'Airline' name=ID description=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////Example: Airline AirCanada 'flights out of canada'
		//'Airline' name=ID description=STRING
		public Group getGroup() { return cGroup; }
		
		////Example: Airline AirCanada 'flights out of canada'
		//'Airline'
		public Keyword getAirlineKeyword_0() { return cAirlineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
	}
	public class FlightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Flight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFromAirportCrossReference_3_0 = (CrossReference)cFromAssignment_3.eContents().get(0);
		private final RuleCall cFromAirportIDTerminalRuleCall_3_0_1 = (RuleCall)cFromAirportCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cToAirportCrossReference_5_0 = (CrossReference)cToAssignment_5.eContents().get(0);
		private final RuleCall cToAirportIDTerminalRuleCall_5_0_1 = (RuleCall)cToAirportCrossReference_5_0.eContents().get(1);
		private final Keyword cWithKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAirlineAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cAirlineAirlineCrossReference_7_0 = (CrossReference)cAirlineAssignment_7.eContents().get(0);
		private final RuleCall cAirlineAirlineIDTerminalRuleCall_7_0_1 = (RuleCall)cAirlineAirlineCrossReference_7_0.eContents().get(1);
		private final Keyword cAtKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTimeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTimeSTRINGTerminalRuleCall_9_0 = (RuleCall)cTimeAssignment_9.eContents().get(0);
		private final Keyword cPilotKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cPilotAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cPilotPilotCrossReference_11_0 = (CrossReference)cPilotAssignment_11.eContents().get(0);
		private final RuleCall cPilotPilotIDTerminalRuleCall_11_0_1 = (RuleCall)cPilotPilotCrossReference_11_0.eContents().get(1);
		private final Keyword cStaffKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cStaffAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cStaffFlightAttendantParserRuleCall_13_0 = (RuleCall)cStaffAssignment_13.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cCommaKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cStaffAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cStaffFlightAttendantParserRuleCall_14_1_0 = (RuleCall)cStaffAssignment_14_1.eContents().get(0);
		
		//Flight:
		//    'Flight' name=ID
		//    //Get two existing airports (from and to)
		//    //Get an existing airline
		//    //Add a time and a date
		//    //TODO: quick issue with this, can go from and to same airport probably....
		//        'from' from=[Airport]
		//        'to' to=[Airport]
		//        'with' airline=[Airline]
		//        'at' time=STRING
		//        'pilot' pilot=[Pilot]
		//        'staff' (staff+=FlightAttendant) (',' (staff+=FlightAttendant))*  //this might not work, need more than 1
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Flight' name=ID
		////Get two existing airports (from and to)
		////Get an existing airline
		////Add a time and a date
		////TODO: quick issue with this, can go from and to same airport probably....
		//    'from' from=[Airport]
		//    'to' to=[Airport]
		//    'with' airline=[Airline]
		//    'at' time=STRING
		//    'pilot' pilot=[Pilot]
		//    'staff' (staff+=FlightAttendant) (',' (staff+=FlightAttendant))*
		public Group getGroup() { return cGroup; }
		
		//'Flight'
		public Keyword getFlightKeyword_0() { return cFlightKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		////Get two existing airports (from and to)
		////Get an existing airline
		////Add a time and a date
		////TODO: quick issue with this, can go from and to same airport probably....
		//    'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//from=[Airport]
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }
		
		//[Airport]
		public CrossReference getFromAirportCrossReference_3_0() { return cFromAirportCrossReference_3_0; }
		
		//ID
		public RuleCall getFromAirportIDTerminalRuleCall_3_0_1() { return cFromAirportIDTerminalRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//to=[Airport]
		public Assignment getToAssignment_5() { return cToAssignment_5; }
		
		//[Airport]
		public CrossReference getToAirportCrossReference_5_0() { return cToAirportCrossReference_5_0; }
		
		//ID
		public RuleCall getToAirportIDTerminalRuleCall_5_0_1() { return cToAirportIDTerminalRuleCall_5_0_1; }
		
		//'with'
		public Keyword getWithKeyword_6() { return cWithKeyword_6; }
		
		//airline=[Airline]
		public Assignment getAirlineAssignment_7() { return cAirlineAssignment_7; }
		
		//[Airline]
		public CrossReference getAirlineAirlineCrossReference_7_0() { return cAirlineAirlineCrossReference_7_0; }
		
		//ID
		public RuleCall getAirlineAirlineIDTerminalRuleCall_7_0_1() { return cAirlineAirlineIDTerminalRuleCall_7_0_1; }
		
		//'at'
		public Keyword getAtKeyword_8() { return cAtKeyword_8; }
		
		//time=STRING
		public Assignment getTimeAssignment_9() { return cTimeAssignment_9; }
		
		//STRING
		public RuleCall getTimeSTRINGTerminalRuleCall_9_0() { return cTimeSTRINGTerminalRuleCall_9_0; }
		
		//'pilot'
		public Keyword getPilotKeyword_10() { return cPilotKeyword_10; }
		
		//pilot=[Pilot]
		public Assignment getPilotAssignment_11() { return cPilotAssignment_11; }
		
		//[Pilot]
		public CrossReference getPilotPilotCrossReference_11_0() { return cPilotPilotCrossReference_11_0; }
		
		//ID
		public RuleCall getPilotPilotIDTerminalRuleCall_11_0_1() { return cPilotPilotIDTerminalRuleCall_11_0_1; }
		
		//'staff'
		public Keyword getStaffKeyword_12() { return cStaffKeyword_12; }
		
		//(staff+=FlightAttendant)
		public Assignment getStaffAssignment_13() { return cStaffAssignment_13; }
		
		//FlightAttendant
		public RuleCall getStaffFlightAttendantParserRuleCall_13_0() { return cStaffFlightAttendantParserRuleCall_13_0; }
		
		//(',' (staff+=FlightAttendant))*
		public Group getGroup_14() { return cGroup_14; }
		
		//','
		public Keyword getCommaKeyword_14_0() { return cCommaKeyword_14_0; }
		
		//(staff+=FlightAttendant)
		public Assignment getStaffAssignment_14_1() { return cStaffAssignment_14_1; }
		
		//FlightAttendant
		public RuleCall getStaffFlightAttendantParserRuleCall_14_1_0() { return cStaffFlightAttendantParserRuleCall_14_1_0; }
	}
	public class ScheduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Schedule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFlightsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFlightsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFlightsFlightParserRuleCall_3_0 = (RuleCall)cFlightsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFlightsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFlightsFlightParserRuleCall_4_1_0 = (RuleCall)cFlightsAssignment_4_1.eContents().get(0);
		
		//Schedule:
		//    name=ID 'with' 'flights' (flights+=Flight) (',' (flights+=Flight))*
		//    //Get a bunch of flights, and add flights to schedule
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'with' 'flights' (flights+=Flight) (',' (flights+=Flight))*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//'flights'
		public Keyword getFlightsKeyword_2() { return cFlightsKeyword_2; }
		
		//(flights+=Flight)
		public Assignment getFlightsAssignment_3() { return cFlightsAssignment_3; }
		
		//Flight
		public RuleCall getFlightsFlightParserRuleCall_3_0() { return cFlightsFlightParserRuleCall_3_0; }
		
		//(',' (flights+=Flight))*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//(flights+=Flight)
		public Assignment getFlightsAssignment_4_1() { return cFlightsAssignment_4_1; }
		
		//Flight
		public RuleCall getFlightsFlightParserRuleCall_4_1_0() { return cFlightsFlightParserRuleCall_4_1_0; }
	}
	public class EmployeeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Employee");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPilotParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFlightAttendantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBagHandlerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGatePersonnelParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Employee:
		//    //Super type, extend to subtypes kinda of like entity thing
		//    // Realte each subtype to their respective airports, or flights
		//    Pilot | FlightAttendant | BagHandler | GatePersonnel
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////Super type, extend to subtypes kinda of like entity thing
		//// Realte each subtype to their respective airports, or flights
		//Pilot | FlightAttendant | BagHandler | GatePersonnel
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////Super type, extend to subtypes kinda of like entity thing
		//// Realte each subtype to their respective airports, or flights
		//Pilot
		public RuleCall getPilotParserRuleCall_0() { return cPilotParserRuleCall_0; }
		
		//FlightAttendant
		public RuleCall getFlightAttendantParserRuleCall_1() { return cFlightAttendantParserRuleCall_1; }
		
		//BagHandler
		public RuleCall getBagHandlerParserRuleCall_2() { return cBagHandlerParserRuleCall_2; }
		
		//GatePersonnel
		public RuleCall getGatePersonnelParserRuleCall_3() { return cGatePersonnelParserRuleCall_3; }
	}
	public class PilotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Pilot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPilotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAirelineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAirelineAirlineCrossReference_3_0 = (CrossReference)cAirelineAssignment_3.eContents().get(0);
		private final RuleCall cAirelineAirlineIDTerminalRuleCall_3_0_1 = (RuleCall)cAirelineAirlineCrossReference_3_0.eContents().get(1);
		
		//Pilot:
		//    'Pilot' name=ID    'with' aireline=[Airline]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Pilot' name=ID	'with' aireline=[Airline]
		public Group getGroup() { return cGroup; }
		
		//'Pilot'
		public Keyword getPilotKeyword_0() { return cPilotKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//aireline=[Airline]
		public Assignment getAirelineAssignment_3() { return cAirelineAssignment_3; }
		
		//[Airline]
		public CrossReference getAirelineAirlineCrossReference_3_0() { return cAirelineAirlineCrossReference_3_0; }
		
		//ID
		public RuleCall getAirelineAirlineIDTerminalRuleCall_3_0_1() { return cAirelineAirlineIDTerminalRuleCall_3_0_1; }
	}
	public class FlightAttendantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.FlightAttendant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlightAttendantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAirelineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAirelineAirlineCrossReference_3_0 = (CrossReference)cAirelineAssignment_3.eContents().get(0);
		private final RuleCall cAirelineAirlineIDTerminalRuleCall_3_0_1 = (RuleCall)cAirelineAirlineCrossReference_3_0.eContents().get(1);
		
		//FlightAttendant:
		//    'FlightAttendant' name=ID    'with' aireline=[Airline]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'FlightAttendant' name=ID	'with' aireline=[Airline]
		public Group getGroup() { return cGroup; }
		
		//'FlightAttendant'
		public Keyword getFlightAttendantKeyword_0() { return cFlightAttendantKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//aireline=[Airline]
		public Assignment getAirelineAssignment_3() { return cAirelineAssignment_3; }
		
		//[Airline]
		public CrossReference getAirelineAirlineCrossReference_3_0() { return cAirelineAirlineCrossReference_3_0; }
		
		//ID
		public RuleCall getAirelineAirlineIDTerminalRuleCall_3_0_1() { return cAirelineAirlineIDTerminalRuleCall_3_0_1; }
	}
	public class BagHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.BagHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBagHandlerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAirportAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAirportAirlineCrossReference_3_0 = (CrossReference)cAirportAssignment_3.eContents().get(0);
		private final RuleCall cAirportAirlineIDTerminalRuleCall_3_0_1 = (RuleCall)cAirportAirlineCrossReference_3_0.eContents().get(1);
		
		//BagHandler:
		//    'BagHandler' name=ID    'with' airport=[Airline]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'BagHandler' name=ID	'with' airport=[Airline]
		public Group getGroup() { return cGroup; }
		
		//'BagHandler'
		public Keyword getBagHandlerKeyword_0() { return cBagHandlerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//airport=[Airline]
		public Assignment getAirportAssignment_3() { return cAirportAssignment_3; }
		
		//[Airline]
		public CrossReference getAirportAirlineCrossReference_3_0() { return cAirportAirlineCrossReference_3_0; }
		
		//ID
		public RuleCall getAirportAirlineIDTerminalRuleCall_3_0_1() { return cAirportAirlineIDTerminalRuleCall_3_0_1; }
	}
	public class GatePersonnelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.GatePersonnel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGatePersonnelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAirportAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAirportAirportCrossReference_3_0 = (CrossReference)cAirportAssignment_3.eContents().get(0);
		private final RuleCall cAirportAirportIDTerminalRuleCall_3_0_1 = (RuleCall)cAirportAirportCrossReference_3_0.eContents().get(1);
		
		//GatePersonnel:
		//    'GatePersonnel' name=ID    'with' airport=[Airport]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'GatePersonnel' name=ID	'with' airport=[Airport]
		public Group getGroup() { return cGroup; }
		
		//'GatePersonnel'
		public Keyword getGatePersonnelKeyword_0() { return cGatePersonnelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//airport=[Airport]
		public Assignment getAirportAssignment_3() { return cAirportAssignment_3; }
		
		//[Airport]
		public CrossReference getAirportAirportCrossReference_3_0() { return cAirportAirportCrossReference_3_0; }
		
		//ID
		public RuleCall getAirportAirportIDTerminalRuleCall_3_0_1() { return cAirportAirportIDTerminalRuleCall_3_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final EntityElements pEntity;
	private final AirportElements pAirport;
	private final AirlineElements pAirline;
	private final FlightElements pFlight;
	private final ScheduleElements pSchedule;
	private final EmployeeElements pEmployee;
	private final PilotElements pPilot;
	private final FlightAttendantElements pFlightAttendant;
	private final BagHandlerElements pBagHandler;
	private final GatePersonnelElements pGatePersonnel;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AirGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEntity = new EntityElements();
		this.pAirport = new AirportElements();
		this.pAirline = new AirlineElements();
		this.pFlight = new FlightElements();
		this.pSchedule = new ScheduleElements();
		this.pEmployee = new EmployeeElements();
		this.pPilot = new PilotElements();
		this.pFlightAttendant = new FlightAttendantElements();
		this.pBagHandler = new BagHandlerElements();
		this.pGatePersonnel = new GatePersonnelElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.airlineregistration.Air".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model :
	//    entities+=Entity*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Entity:
	//    Airport | Airline | Flight | Schedule | Employee
	//;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Airport :
	//    //Example: Airport YUL 'Pierre Trudeau'
	//    'Airport' code=ID name=STRING location=STRING
	//;
	public AirportElements getAirportAccess() {
		return pAirport;
	}
	
	public ParserRule getAirportRule() {
		return getAirportAccess().getRule();
	}
	
	//Airline:
	//    //Example: Airline AirCanada 'flights out of canada'
	//    'Airline' name=ID description=STRING
	//;
	public AirlineElements getAirlineAccess() {
		return pAirline;
	}
	
	public ParserRule getAirlineRule() {
		return getAirlineAccess().getRule();
	}
	
	//Flight:
	//    'Flight' name=ID
	//    //Get two existing airports (from and to)
	//    //Get an existing airline
	//    //Add a time and a date
	//    //TODO: quick issue with this, can go from and to same airport probably....
	//        'from' from=[Airport]
	//        'to' to=[Airport]
	//        'with' airline=[Airline]
	//        'at' time=STRING
	//        'pilot' pilot=[Pilot]
	//        'staff' (staff+=FlightAttendant) (',' (staff+=FlightAttendant))*  //this might not work, need more than 1
	//;
	public FlightElements getFlightAccess() {
		return pFlight;
	}
	
	public ParserRule getFlightRule() {
		return getFlightAccess().getRule();
	}
	
	//Schedule:
	//    name=ID 'with' 'flights' (flights+=Flight) (',' (flights+=Flight))*
	//    //Get a bunch of flights, and add flights to schedule
	//;
	public ScheduleElements getScheduleAccess() {
		return pSchedule;
	}
	
	public ParserRule getScheduleRule() {
		return getScheduleAccess().getRule();
	}
	
	//Employee:
	//    //Super type, extend to subtypes kinda of like entity thing
	//    // Realte each subtype to their respective airports, or flights
	//    Pilot | FlightAttendant | BagHandler | GatePersonnel
	//;
	public EmployeeElements getEmployeeAccess() {
		return pEmployee;
	}
	
	public ParserRule getEmployeeRule() {
		return getEmployeeAccess().getRule();
	}
	
	//Pilot:
	//    'Pilot' name=ID    'with' aireline=[Airline]
	//;
	public PilotElements getPilotAccess() {
		return pPilot;
	}
	
	public ParserRule getPilotRule() {
		return getPilotAccess().getRule();
	}
	
	//FlightAttendant:
	//    'FlightAttendant' name=ID    'with' aireline=[Airline]
	//;
	public FlightAttendantElements getFlightAttendantAccess() {
		return pFlightAttendant;
	}
	
	public ParserRule getFlightAttendantRule() {
		return getFlightAttendantAccess().getRule();
	}
	
	//BagHandler:
	//    'BagHandler' name=ID    'with' airport=[Airline]
	//;
	public BagHandlerElements getBagHandlerAccess() {
		return pBagHandler;
	}
	
	public ParserRule getBagHandlerRule() {
		return getBagHandlerAccess().getRule();
	}
	
	//GatePersonnel:
	//    'GatePersonnel' name=ID    'with' airport=[Airport]
	//;
	public GatePersonnelElements getGatePersonnelAccess() {
		return pGatePersonnel;
	}
	
	public ParserRule getGatePersonnelRule() {
		return getGatePersonnelAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
