/*
 * generated by Xtext 2.26.0
 */
package org.xtext.airlineregistration.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AirGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Model");
		private final Assignment cEntitiesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntitiesEntityParserRuleCall_0 = (RuleCall)cEntitiesAssignment.eContents().get(0);
		
		//Model :
		//    entities+=Entity*;
		@Override public ParserRule getRule() { return rule; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment() { return cEntitiesAssignment; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_0() { return cEntitiesEntityParserRuleCall_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAirportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAirlineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFlightParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cScheduleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEmployeeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAirplaneParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPassengerParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Entity:
		//    Airport | Airline | Flight | Schedule | Employee | Airplane | Passenger
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Airport | Airline | Flight | Schedule | Employee | Airplane | Passenger
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Airport
		public RuleCall getAirportParserRuleCall_0() { return cAirportParserRuleCall_0; }
		
		//Airline
		public RuleCall getAirlineParserRuleCall_1() { return cAirlineParserRuleCall_1; }
		
		//Flight
		public RuleCall getFlightParserRuleCall_2() { return cFlightParserRuleCall_2; }
		
		//Schedule
		public RuleCall getScheduleParserRuleCall_3() { return cScheduleParserRuleCall_3; }
		
		//Employee
		public RuleCall getEmployeeParserRuleCall_4() { return cEmployeeParserRuleCall_4; }
		
		//Airplane
		public RuleCall getAirplaneParserRuleCall_5() { return cAirplaneParserRuleCall_5; }
		
		//Passenger
		public RuleCall getPassengerParserRuleCall_6() { return cPassengerParserRuleCall_6; }
	}
	public class AirportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Airport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAirportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeIDTerminalRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cLocationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocationSTRINGTerminalRuleCall_3_0 = (RuleCall)cLocationAssignment_3.eContents().get(0);
		
		//Airport :
		//    //Example: Airport YUL 'Pierre Trudeau'
		//    'Airport' code=ID name=STRING location=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////Example: Airport YUL 'Pierre Trudeau'
		//'Airport' code=ID name=STRING location=STRING
		public Group getGroup() { return cGroup; }
		
		////Example: Airport YUL 'Pierre Trudeau'
		//'Airport'
		public Keyword getAirportKeyword_0() { return cAirportKeyword_0; }
		
		//code=ID
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//ID
		public RuleCall getCodeIDTerminalRuleCall_1_0() { return cCodeIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//location=STRING
		public Assignment getLocationAssignment_3() { return cLocationAssignment_3; }
		
		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_3_0() { return cLocationSTRINGTerminalRuleCall_3_0; }
	}
	public class AirlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Airline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAirlineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//Airline:
		//    //Example: Airline AirCanada 'flights out of canada'
		//    'Airline' name=ID description=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////Example: Airline AirCanada 'flights out of canada'
		//'Airline' name=ID description=STRING
		public Group getGroup() { return cGroup; }
		
		////Example: Airline AirCanada 'flights out of canada'
		//'Airline'
		public Keyword getAirlineKeyword_0() { return cAirlineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
	}
	public class AirplaneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Airplane");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAirplaneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAirplaneIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAirplaneIdIDTerminalRuleCall_1_0 = (RuleCall)cAirplaneIdAssignment_1.eContents().get(0);
		private final Assignment cAirplaneTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAirplaneTypeSTRINGTerminalRuleCall_2_0 = (RuleCall)cAirplaneTypeAssignment_2.eContents().get(0);
		private final Assignment cSeatsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSeatsINTTerminalRuleCall_3_0 = (RuleCall)cSeatsAssignment_3.eContents().get(0);
		
		//Airplane:
		//    'Airplane' airplaneId=ID airplaneType=STRING seats=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Airplane' airplaneId=ID airplaneType=STRING seats=INT
		public Group getGroup() { return cGroup; }
		
		//'Airplane'
		public Keyword getAirplaneKeyword_0() { return cAirplaneKeyword_0; }
		
		//airplaneId=ID
		public Assignment getAirplaneIdAssignment_1() { return cAirplaneIdAssignment_1; }
		
		//ID
		public RuleCall getAirplaneIdIDTerminalRuleCall_1_0() { return cAirplaneIdIDTerminalRuleCall_1_0; }
		
		//airplaneType=STRING
		public Assignment getAirplaneTypeAssignment_2() { return cAirplaneTypeAssignment_2; }
		
		//STRING
		public RuleCall getAirplaneTypeSTRINGTerminalRuleCall_2_0() { return cAirplaneTypeSTRINGTerminalRuleCall_2_0; }
		
		//seats=INT
		public Assignment getSeatsAssignment_3() { return cSeatsAssignment_3; }
		
		//INT
		public RuleCall getSeatsINTTerminalRuleCall_3_0() { return cSeatsINTTerminalRuleCall_3_0; }
	}
	public class FlightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Flight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFlightIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFlightIdIDTerminalRuleCall_1_0 = (RuleCall)cFlightIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFromAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFromAirportCrossReference_4_0 = (CrossReference)cFromAssignment_4.eContents().get(0);
		private final RuleCall cFromAirportIDTerminalRuleCall_4_0_1 = (RuleCall)cFromAirportCrossReference_4_0.eContents().get(1);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cToAirportCrossReference_6_0 = (CrossReference)cToAssignment_6.eContents().get(0);
		private final RuleCall cToAirportIDTerminalRuleCall_6_0_1 = (RuleCall)cToAirportCrossReference_6_0.eContents().get(1);
		private final Keyword cWithKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAirlineAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cAirlineAirlineCrossReference_8_0 = (CrossReference)cAirlineAssignment_8.eContents().get(0);
		private final RuleCall cAirlineAirlineIDTerminalRuleCall_8_0_1 = (RuleCall)cAirlineAirlineCrossReference_8_0.eContents().get(1);
		private final Keyword cAtKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTimeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTimeSTRINGTerminalRuleCall_10_0 = (RuleCall)cTimeAssignment_10.eContents().get(0);
		private final Keyword cPilotKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cPilotAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final CrossReference cPilotPilotCrossReference_12_0 = (CrossReference)cPilotAssignment_12.eContents().get(0);
		private final RuleCall cPilotPilotIDTerminalRuleCall_12_0_1 = (RuleCall)cPilotPilotCrossReference_12_0.eContents().get(1);
		private final Keyword cAirplaneKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cPlaneAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final CrossReference cPlaneAirplaneCrossReference_14_0 = (CrossReference)cPlaneAssignment_14.eContents().get(0);
		private final RuleCall cPlaneAirplaneIDTerminalRuleCall_14_0_1 = (RuleCall)cPlaneAirplaneCrossReference_14_0.eContents().get(1);
		private final Keyword cStaffKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cStaffAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final CrossReference cStaffFlightAttendantCrossReference_16_0 = (CrossReference)cStaffAssignment_16.eContents().get(0);
		private final RuleCall cStaffFlightAttendantIDTerminalRuleCall_16_0_1 = (RuleCall)cStaffFlightAttendantCrossReference_16_0.eContents().get(1);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Keyword cCommaKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Assignment cStaffAssignment_17_1 = (Assignment)cGroup_17.eContents().get(1);
		private final CrossReference cStaffFlightAttendantCrossReference_17_1_0 = (CrossReference)cStaffAssignment_17_1.eContents().get(0);
		private final RuleCall cStaffFlightAttendantIDTerminalRuleCall_17_1_0_1 = (RuleCall)cStaffFlightAttendantCrossReference_17_1_0.eContents().get(1);
		
		//Flight:
		//    'Flight' flightId=ID name=STRING
		//    //Get two existing airports (from and to)
		//    //Get an existing airline
		//    //Add a time and a date
		//    //TODO: quick issue with this, can go from and to same airport probably....
		//        'from' from=[Airport]
		//        'to' to=[Airport]
		//        'with' airline=[Airline]
		//        'at' time=STRING
		//        'pilot' pilot=[Pilot]
		//        'airplane' plane=[Airplane]
		//        'staff' (staff+=[FlightAttendant]) (',' (staff+=[FlightAttendant]))*  //this might not work, need more than 1
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Flight' flightId=ID name=STRING
		////Get two existing airports (from and to)
		////Get an existing airline
		////Add a time and a date
		////TODO: quick issue with this, can go from and to same airport probably....
		//    'from' from=[Airport]
		//    'to' to=[Airport]
		//    'with' airline=[Airline]
		//    'at' time=STRING
		//    'pilot' pilot=[Pilot]
		//    'airplane' plane=[Airplane]
		//    'staff' (staff+=[FlightAttendant]) (',' (staff+=[FlightAttendant]))*
		public Group getGroup() { return cGroup; }
		
		//'Flight'
		public Keyword getFlightKeyword_0() { return cFlightKeyword_0; }
		
		//flightId=ID
		public Assignment getFlightIdAssignment_1() { return cFlightIdAssignment_1; }
		
		//ID
		public RuleCall getFlightIdIDTerminalRuleCall_1_0() { return cFlightIdIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		////Get two existing airports (from and to)
		////Get an existing airline
		////Add a time and a date
		////TODO: quick issue with this, can go from and to same airport probably....
		//    'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//from=[Airport]
		public Assignment getFromAssignment_4() { return cFromAssignment_4; }
		
		//[Airport]
		public CrossReference getFromAirportCrossReference_4_0() { return cFromAirportCrossReference_4_0; }
		
		//ID
		public RuleCall getFromAirportIDTerminalRuleCall_4_0_1() { return cFromAirportIDTerminalRuleCall_4_0_1; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//to=[Airport]
		public Assignment getToAssignment_6() { return cToAssignment_6; }
		
		//[Airport]
		public CrossReference getToAirportCrossReference_6_0() { return cToAirportCrossReference_6_0; }
		
		//ID
		public RuleCall getToAirportIDTerminalRuleCall_6_0_1() { return cToAirportIDTerminalRuleCall_6_0_1; }
		
		//'with'
		public Keyword getWithKeyword_7() { return cWithKeyword_7; }
		
		//airline=[Airline]
		public Assignment getAirlineAssignment_8() { return cAirlineAssignment_8; }
		
		//[Airline]
		public CrossReference getAirlineAirlineCrossReference_8_0() { return cAirlineAirlineCrossReference_8_0; }
		
		//ID
		public RuleCall getAirlineAirlineIDTerminalRuleCall_8_0_1() { return cAirlineAirlineIDTerminalRuleCall_8_0_1; }
		
		//'at'
		public Keyword getAtKeyword_9() { return cAtKeyword_9; }
		
		//time=STRING
		public Assignment getTimeAssignment_10() { return cTimeAssignment_10; }
		
		//STRING
		public RuleCall getTimeSTRINGTerminalRuleCall_10_0() { return cTimeSTRINGTerminalRuleCall_10_0; }
		
		//'pilot'
		public Keyword getPilotKeyword_11() { return cPilotKeyword_11; }
		
		//pilot=[Pilot]
		public Assignment getPilotAssignment_12() { return cPilotAssignment_12; }
		
		//[Pilot]
		public CrossReference getPilotPilotCrossReference_12_0() { return cPilotPilotCrossReference_12_0; }
		
		//ID
		public RuleCall getPilotPilotIDTerminalRuleCall_12_0_1() { return cPilotPilotIDTerminalRuleCall_12_0_1; }
		
		//'airplane'
		public Keyword getAirplaneKeyword_13() { return cAirplaneKeyword_13; }
		
		//plane=[Airplane]
		public Assignment getPlaneAssignment_14() { return cPlaneAssignment_14; }
		
		//[Airplane]
		public CrossReference getPlaneAirplaneCrossReference_14_0() { return cPlaneAirplaneCrossReference_14_0; }
		
		//ID
		public RuleCall getPlaneAirplaneIDTerminalRuleCall_14_0_1() { return cPlaneAirplaneIDTerminalRuleCall_14_0_1; }
		
		//'staff'
		public Keyword getStaffKeyword_15() { return cStaffKeyword_15; }
		
		//(staff+=[FlightAttendant])
		public Assignment getStaffAssignment_16() { return cStaffAssignment_16; }
		
		//[FlightAttendant]
		public CrossReference getStaffFlightAttendantCrossReference_16_0() { return cStaffFlightAttendantCrossReference_16_0; }
		
		//ID
		public RuleCall getStaffFlightAttendantIDTerminalRuleCall_16_0_1() { return cStaffFlightAttendantIDTerminalRuleCall_16_0_1; }
		
		//(',' (staff+=[FlightAttendant]))*
		public Group getGroup_17() { return cGroup_17; }
		
		//','
		public Keyword getCommaKeyword_17_0() { return cCommaKeyword_17_0; }
		
		//(staff+=[FlightAttendant])
		public Assignment getStaffAssignment_17_1() { return cStaffAssignment_17_1; }
		
		//[FlightAttendant]
		public CrossReference getStaffFlightAttendantCrossReference_17_1_0() { return cStaffFlightAttendantCrossReference_17_1_0; }
		
		//ID
		public RuleCall getStaffFlightAttendantIDTerminalRuleCall_17_1_0_1() { return cStaffFlightAttendantIDTerminalRuleCall_17_1_0_1; }
	}
	public class ScheduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Schedule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFlightsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFlightsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFlightsFlightParserRuleCall_3_0 = (RuleCall)cFlightsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFlightsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFlightsFlightParserRuleCall_4_1_0 = (RuleCall)cFlightsAssignment_4_1.eContents().get(0);
		
		//Schedule:
		//    name=ID 'with' 'flights' (flights+=Flight) (',' (flights+=Flight))*
		//    //Get a bunch of flights, and add flights to schedule
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'with' 'flights' (flights+=Flight) (',' (flights+=Flight))*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//'flights'
		public Keyword getFlightsKeyword_2() { return cFlightsKeyword_2; }
		
		//(flights+=Flight)
		public Assignment getFlightsAssignment_3() { return cFlightsAssignment_3; }
		
		//Flight
		public RuleCall getFlightsFlightParserRuleCall_3_0() { return cFlightsFlightParserRuleCall_3_0; }
		
		//(',' (flights+=Flight))*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//(flights+=Flight)
		public Assignment getFlightsAssignment_4_1() { return cFlightsAssignment_4_1; }
		
		//Flight
		public RuleCall getFlightsFlightParserRuleCall_4_1_0() { return cFlightsFlightParserRuleCall_4_1_0; }
	}
	public class EmployeeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Employee");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPilotParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFlightAttendantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBagHandlerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGatePersonnelParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Employee:
		//    //Super type, extend to subtypes kinda of like entity thing
		//    // Realte each subtype to their respective airports, or flights
		//    Pilot | FlightAttendant | BagHandler | GatePersonnel
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////Super type, extend to subtypes kinda of like entity thing
		//// Realte each subtype to their respective airports, or flights
		//Pilot | FlightAttendant | BagHandler | GatePersonnel
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////Super type, extend to subtypes kinda of like entity thing
		//// Realte each subtype to their respective airports, or flights
		//Pilot
		public RuleCall getPilotParserRuleCall_0() { return cPilotParserRuleCall_0; }
		
		//FlightAttendant
		public RuleCall getFlightAttendantParserRuleCall_1() { return cFlightAttendantParserRuleCall_1; }
		
		//BagHandler
		public RuleCall getBagHandlerParserRuleCall_2() { return cBagHandlerParserRuleCall_2; }
		
		//GatePersonnel
		public RuleCall getGatePersonnelParserRuleCall_3() { return cGatePersonnelParserRuleCall_3; }
	}
	public class PilotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Pilot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPilotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEmpIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEmpIdIDTerminalRuleCall_1_0 = (RuleCall)cEmpIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAirlineAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAirlineAirlineCrossReference_4_0 = (CrossReference)cAirlineAssignment_4.eContents().get(0);
		private final RuleCall cAirlineAirlineIDTerminalRuleCall_4_0_1 = (RuleCall)cAirlineAirlineCrossReference_4_0.eContents().get(1);
		
		//Pilot:
		//    'Pilot' empId=ID name=STRING 'with' airline=[Airline]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Pilot' empId=ID name=STRING 'with' airline=[Airline]
		public Group getGroup() { return cGroup; }
		
		//'Pilot'
		public Keyword getPilotKeyword_0() { return cPilotKeyword_0; }
		
		//empId=ID
		public Assignment getEmpIdAssignment_1() { return cEmpIdAssignment_1; }
		
		//ID
		public RuleCall getEmpIdIDTerminalRuleCall_1_0() { return cEmpIdIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//airline=[Airline]
		public Assignment getAirlineAssignment_4() { return cAirlineAssignment_4; }
		
		//[Airline]
		public CrossReference getAirlineAirlineCrossReference_4_0() { return cAirlineAirlineCrossReference_4_0; }
		
		//ID
		public RuleCall getAirlineAirlineIDTerminalRuleCall_4_0_1() { return cAirlineAirlineIDTerminalRuleCall_4_0_1; }
	}
	public class FlightAttendantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.FlightAttendant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlightAttendantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEmpIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEmpIdIDTerminalRuleCall_1_0 = (RuleCall)cEmpIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAirlineAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAirlineAirlineCrossReference_4_0 = (CrossReference)cAirlineAssignment_4.eContents().get(0);
		private final RuleCall cAirlineAirlineIDTerminalRuleCall_4_0_1 = (RuleCall)cAirlineAirlineCrossReference_4_0.eContents().get(1);
		
		//FlightAttendant:
		//    'FlightAttendant' empId=ID name=STRING 'with' airline=[Airline]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'FlightAttendant' empId=ID name=STRING 'with' airline=[Airline]
		public Group getGroup() { return cGroup; }
		
		//'FlightAttendant'
		public Keyword getFlightAttendantKeyword_0() { return cFlightAttendantKeyword_0; }
		
		//empId=ID
		public Assignment getEmpIdAssignment_1() { return cEmpIdAssignment_1; }
		
		//ID
		public RuleCall getEmpIdIDTerminalRuleCall_1_0() { return cEmpIdIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//airline=[Airline]
		public Assignment getAirlineAssignment_4() { return cAirlineAssignment_4; }
		
		//[Airline]
		public CrossReference getAirlineAirlineCrossReference_4_0() { return cAirlineAirlineCrossReference_4_0; }
		
		//ID
		public RuleCall getAirlineAirlineIDTerminalRuleCall_4_0_1() { return cAirlineAirlineIDTerminalRuleCall_4_0_1; }
	}
	public class BagHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.BagHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBagHandlerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEmpIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEmpIdIDTerminalRuleCall_1_0 = (RuleCall)cEmpIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAirportAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAirportAirportCrossReference_4_0 = (CrossReference)cAirportAssignment_4.eContents().get(0);
		private final RuleCall cAirportAirportIDTerminalRuleCall_4_0_1 = (RuleCall)cAirportAirportCrossReference_4_0.eContents().get(1);
		
		//BagHandler:
		//    'BagHandler' empId=ID name=STRING 'with' airport=[Airport]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'BagHandler' empId=ID name=STRING 'with' airport=[Airport]
		public Group getGroup() { return cGroup; }
		
		//'BagHandler'
		public Keyword getBagHandlerKeyword_0() { return cBagHandlerKeyword_0; }
		
		//empId=ID
		public Assignment getEmpIdAssignment_1() { return cEmpIdAssignment_1; }
		
		//ID
		public RuleCall getEmpIdIDTerminalRuleCall_1_0() { return cEmpIdIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//airport=[Airport]
		public Assignment getAirportAssignment_4() { return cAirportAssignment_4; }
		
		//[Airport]
		public CrossReference getAirportAirportCrossReference_4_0() { return cAirportAirportCrossReference_4_0; }
		
		//ID
		public RuleCall getAirportAirportIDTerminalRuleCall_4_0_1() { return cAirportAirportIDTerminalRuleCall_4_0_1; }
	}
	public class GatePersonnelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.GatePersonnel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGatePersonnelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEmpIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEmpIdIDTerminalRuleCall_1_0 = (RuleCall)cEmpIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAirportAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAirportAirportCrossReference_4_0 = (CrossReference)cAirportAssignment_4.eContents().get(0);
		private final RuleCall cAirportAirportIDTerminalRuleCall_4_0_1 = (RuleCall)cAirportAirportCrossReference_4_0.eContents().get(1);
		
		//GatePersonnel:
		//    'GatePersonnel' empId=ID name=STRING 'with' airport=[Airport]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'GatePersonnel' empId=ID name=STRING 'with' airport=[Airport]
		public Group getGroup() { return cGroup; }
		
		//'GatePersonnel'
		public Keyword getGatePersonnelKeyword_0() { return cGatePersonnelKeyword_0; }
		
		//empId=ID
		public Assignment getEmpIdAssignment_1() { return cEmpIdAssignment_1; }
		
		//ID
		public RuleCall getEmpIdIDTerminalRuleCall_1_0() { return cEmpIdIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//airport=[Airport]
		public Assignment getAirportAssignment_4() { return cAirportAssignment_4; }
		
		//[Airport]
		public CrossReference getAirportAirportCrossReference_4_0() { return cAirportAirportCrossReference_4_0; }
		
		//ID
		public RuleCall getAirportAirportIDTerminalRuleCall_4_0_1() { return cAirportAirportIDTerminalRuleCall_4_0_1; }
	}
	public class PassengerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Passenger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPassengerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEmailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEmailIDTerminalRuleCall_1_0 = (RuleCall)cEmailAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFlightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFlightFlightCrossReference_4_0 = (CrossReference)cFlightAssignment_4.eContents().get(0);
		private final RuleCall cFlightFlightIDTerminalRuleCall_4_0_1 = (RuleCall)cFlightFlightCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFlightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cFlightFlightCrossReference_5_1_0 = (CrossReference)cFlightAssignment_5_1.eContents().get(0);
		private final RuleCall cFlightFlightIDTerminalRuleCall_5_1_0_1 = (RuleCall)cFlightFlightCrossReference_5_1_0.eContents().get(1);
		
		//Passenger:
		//    'Passenger' email=ID name=STRING 'with' (flight+=[Flight]) (',' (flight+=[Flight]))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Passenger' email=ID name=STRING 'with' (flight+=[Flight]) (',' (flight+=[Flight]))*
		public Group getGroup() { return cGroup; }
		
		//'Passenger'
		public Keyword getPassengerKeyword_0() { return cPassengerKeyword_0; }
		
		//email=ID
		public Assignment getEmailAssignment_1() { return cEmailAssignment_1; }
		
		//ID
		public RuleCall getEmailIDTerminalRuleCall_1_0() { return cEmailIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//(flight+=[Flight])
		public Assignment getFlightAssignment_4() { return cFlightAssignment_4; }
		
		//[Flight]
		public CrossReference getFlightFlightCrossReference_4_0() { return cFlightFlightCrossReference_4_0; }
		
		//ID
		public RuleCall getFlightFlightIDTerminalRuleCall_4_0_1() { return cFlightFlightIDTerminalRuleCall_4_0_1; }
		
		//(',' (flight+=[Flight]))*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//(flight+=[Flight])
		public Assignment getFlightAssignment_5_1() { return cFlightAssignment_5_1; }
		
		//[Flight]
		public CrossReference getFlightFlightCrossReference_5_1_0() { return cFlightFlightCrossReference_5_1_0; }
		
		//ID
		public RuleCall getFlightFlightIDTerminalRuleCall_5_1_0_1() { return cFlightFlightIDTerminalRuleCall_5_1_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final EntityElements pEntity;
	private final AirportElements pAirport;
	private final AirlineElements pAirline;
	private final AirplaneElements pAirplane;
	private final FlightElements pFlight;
	private final ScheduleElements pSchedule;
	private final EmployeeElements pEmployee;
	private final PilotElements pPilot;
	private final FlightAttendantElements pFlightAttendant;
	private final BagHandlerElements pBagHandler;
	private final GatePersonnelElements pGatePersonnel;
	private final PassengerElements pPassenger;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AirGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEntity = new EntityElements();
		this.pAirport = new AirportElements();
		this.pAirline = new AirlineElements();
		this.pAirplane = new AirplaneElements();
		this.pFlight = new FlightElements();
		this.pSchedule = new ScheduleElements();
		this.pEmployee = new EmployeeElements();
		this.pPilot = new PilotElements();
		this.pFlightAttendant = new FlightAttendantElements();
		this.pBagHandler = new BagHandlerElements();
		this.pGatePersonnel = new GatePersonnelElements();
		this.pPassenger = new PassengerElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.airlineregistration.Air".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model :
	//    entities+=Entity*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Entity:
	//    Airport | Airline | Flight | Schedule | Employee | Airplane | Passenger
	//;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Airport :
	//    //Example: Airport YUL 'Pierre Trudeau'
	//    'Airport' code=ID name=STRING location=STRING
	//;
	public AirportElements getAirportAccess() {
		return pAirport;
	}
	
	public ParserRule getAirportRule() {
		return getAirportAccess().getRule();
	}
	
	//Airline:
	//    //Example: Airline AirCanada 'flights out of canada'
	//    'Airline' name=ID description=STRING
	//;
	public AirlineElements getAirlineAccess() {
		return pAirline;
	}
	
	public ParserRule getAirlineRule() {
		return getAirlineAccess().getRule();
	}
	
	//Airplane:
	//    'Airplane' airplaneId=ID airplaneType=STRING seats=INT
	//;
	public AirplaneElements getAirplaneAccess() {
		return pAirplane;
	}
	
	public ParserRule getAirplaneRule() {
		return getAirplaneAccess().getRule();
	}
	
	//Flight:
	//    'Flight' flightId=ID name=STRING
	//    //Get two existing airports (from and to)
	//    //Get an existing airline
	//    //Add a time and a date
	//    //TODO: quick issue with this, can go from and to same airport probably....
	//        'from' from=[Airport]
	//        'to' to=[Airport]
	//        'with' airline=[Airline]
	//        'at' time=STRING
	//        'pilot' pilot=[Pilot]
	//        'airplane' plane=[Airplane]
	//        'staff' (staff+=[FlightAttendant]) (',' (staff+=[FlightAttendant]))*  //this might not work, need more than 1
	//;
	public FlightElements getFlightAccess() {
		return pFlight;
	}
	
	public ParserRule getFlightRule() {
		return getFlightAccess().getRule();
	}
	
	//Schedule:
	//    name=ID 'with' 'flights' (flights+=Flight) (',' (flights+=Flight))*
	//    //Get a bunch of flights, and add flights to schedule
	//;
	public ScheduleElements getScheduleAccess() {
		return pSchedule;
	}
	
	public ParserRule getScheduleRule() {
		return getScheduleAccess().getRule();
	}
	
	//Employee:
	//    //Super type, extend to subtypes kinda of like entity thing
	//    // Realte each subtype to their respective airports, or flights
	//    Pilot | FlightAttendant | BagHandler | GatePersonnel
	//;
	public EmployeeElements getEmployeeAccess() {
		return pEmployee;
	}
	
	public ParserRule getEmployeeRule() {
		return getEmployeeAccess().getRule();
	}
	
	//Pilot:
	//    'Pilot' empId=ID name=STRING 'with' airline=[Airline]
	//;
	public PilotElements getPilotAccess() {
		return pPilot;
	}
	
	public ParserRule getPilotRule() {
		return getPilotAccess().getRule();
	}
	
	//FlightAttendant:
	//    'FlightAttendant' empId=ID name=STRING 'with' airline=[Airline]
	//;
	public FlightAttendantElements getFlightAttendantAccess() {
		return pFlightAttendant;
	}
	
	public ParserRule getFlightAttendantRule() {
		return getFlightAttendantAccess().getRule();
	}
	
	//BagHandler:
	//    'BagHandler' empId=ID name=STRING 'with' airport=[Airport]
	//;
	public BagHandlerElements getBagHandlerAccess() {
		return pBagHandler;
	}
	
	public ParserRule getBagHandlerRule() {
		return getBagHandlerAccess().getRule();
	}
	
	//GatePersonnel:
	//    'GatePersonnel' empId=ID name=STRING 'with' airport=[Airport]
	//;
	public GatePersonnelElements getGatePersonnelAccess() {
		return pGatePersonnel;
	}
	
	public ParserRule getGatePersonnelRule() {
		return getGatePersonnelAccess().getRule();
	}
	
	//Passenger:
	//    'Passenger' email=ID name=STRING 'with' (flight+=[Flight]) (',' (flight+=[Flight]))*
	//;
	public PassengerElements getPassengerAccess() {
		return pPassenger;
	}
	
	public ParserRule getPassengerRule() {
		return getPassengerAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
