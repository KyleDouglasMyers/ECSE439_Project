/*
 * generated by Xtext 2.26.0
 */
package org.xtext.airlineregistration.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AirGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Model");
		private final Assignment cEntitiesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntitiesEntityParserRuleCall_0 = (RuleCall)cEntitiesAssignment.eContents().get(0);
		
		//Model :
		//    entities+=Entity*;
		@Override public ParserRule getRule() { return rule; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment() { return cEntitiesAssignment; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_0() { return cEntitiesEntityParserRuleCall_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAirportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAirlineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cScheduledFlightParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSpecificFlightParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cScheduleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEmployeeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAirplaneParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPassengerParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Entity:
		//    Airport | Airline | ScheduledFlight | SpecificFlight | Schedule | Employee | Airplane | Passenger
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Airport | Airline | ScheduledFlight | SpecificFlight | Schedule | Employee | Airplane | Passenger
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Airport
		public RuleCall getAirportParserRuleCall_0() { return cAirportParserRuleCall_0; }
		
		//Airline
		public RuleCall getAirlineParserRuleCall_1() { return cAirlineParserRuleCall_1; }
		
		//ScheduledFlight
		public RuleCall getScheduledFlightParserRuleCall_2() { return cScheduledFlightParserRuleCall_2; }
		
		//SpecificFlight
		public RuleCall getSpecificFlightParserRuleCall_3() { return cSpecificFlightParserRuleCall_3; }
		
		//Schedule
		public RuleCall getScheduleParserRuleCall_4() { return cScheduleParserRuleCall_4; }
		
		//Employee
		public RuleCall getEmployeeParserRuleCall_5() { return cEmployeeParserRuleCall_5; }
		
		//Airplane
		public RuleCall getAirplaneParserRuleCall_6() { return cAirplaneParserRuleCall_6; }
		
		//Passenger
		public RuleCall getPassengerParserRuleCall_7() { return cPassengerParserRuleCall_7; }
	}
	public class AirportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Airport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAirportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnameSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnameAssignment_2.eContents().get(0);
		private final Assignment cLocationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocationSTRINGTerminalRuleCall_3_0 = (RuleCall)cLocationAssignment_3.eContents().get(0);
		
		//Airport :
		//    //Example: Airport YUL 'Pierre Trudeau'
		//    'Airport' name=ID aname=STRING location=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////Example: Airport YUL 'Pierre Trudeau'
		//'Airport' name=ID aname=STRING location=STRING
		public Group getGroup() { return cGroup; }
		
		////Example: Airport YUL 'Pierre Trudeau'
		//'Airport'
		public Keyword getAirportKeyword_0() { return cAirportKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//aname=STRING
		public Assignment getAnameAssignment_2() { return cAnameAssignment_2; }
		
		//STRING
		public RuleCall getAnameSTRINGTerminalRuleCall_2_0() { return cAnameSTRINGTerminalRuleCall_2_0; }
		
		//location=STRING
		public Assignment getLocationAssignment_3() { return cLocationAssignment_3; }
		
		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_3_0() { return cLocationSTRINGTerminalRuleCall_3_0; }
	}
	public class AirlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Airline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAirlineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//Airline:
		//    //Example: Airline AirCanada 'flights out of canada'
		//    'Airline' name=ID description=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////Example: Airline AirCanada 'flights out of canada'
		//'Airline' name=ID description=STRING
		public Group getGroup() { return cGroup; }
		
		////Example: Airline AirCanada 'flights out of canada'
		//'Airline'
		public Keyword getAirlineKeyword_0() { return cAirlineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
	}
	public class AirplaneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Airplane");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAirplaneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSTRINGTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cSeatsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSeatsINTTerminalRuleCall_3_0 = (RuleCall)cSeatsAssignment_3.eContents().get(0);
		
		//Airplane:
		//    'Airplane' name=ID type=STRING seats=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Airplane' name=ID type=STRING seats=INT
		public Group getGroup() { return cGroup; }
		
		//'Airplane'
		public Keyword getAirplaneKeyword_0() { return cAirplaneKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//type=STRING
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_2_0() { return cTypeSTRINGTerminalRuleCall_2_0; }
		
		//seats=INT
		public Assignment getSeatsAssignment_3() { return cSeatsAssignment_3; }
		
		//INT
		public RuleCall getSeatsINTTerminalRuleCall_3_0() { return cSeatsINTTerminalRuleCall_3_0; }
	}
	public class ScheduledFlightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.ScheduledFlight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScheduledFlightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFromAirportCrossReference_3_0 = (CrossReference)cFromAssignment_3.eContents().get(0);
		private final RuleCall cFromAirportIDTerminalRuleCall_3_0_1 = (RuleCall)cFromAirportCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cToAirportCrossReference_5_0 = (CrossReference)cToAssignment_5.eContents().get(0);
		private final RuleCall cToAirportIDTerminalRuleCall_5_0_1 = (RuleCall)cToAirportCrossReference_5_0.eContents().get(1);
		private final Keyword cWithKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAirlineAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cAirlineAirlineCrossReference_7_0 = (CrossReference)cAirlineAssignment_7.eContents().get(0);
		private final RuleCall cAirlineAirlineIDTerminalRuleCall_7_0_1 = (RuleCall)cAirlineAirlineCrossReference_7_0.eContents().get(1);
		private final Keyword cAtKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTimeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTimeSTRINGTerminalRuleCall_9_0 = (RuleCall)cTimeAssignment_9.eContents().get(0);
		
		//ScheduledFlight:
		//    'ScheduledFlight' name=ID
		//    'from' from=[Airport]
		//    'to' to=[Airport]
		//    'with' airline=[Airline]
		//    'at' time=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ScheduledFlight' name=ID
		//'from' from=[Airport]
		//'to' to=[Airport]
		//'with' airline=[Airline]
		//'at' time=STRING
		public Group getGroup() { return cGroup; }
		
		//'ScheduledFlight'
		public Keyword getScheduledFlightKeyword_0() { return cScheduledFlightKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//from=[Airport]
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }
		
		//[Airport]
		public CrossReference getFromAirportCrossReference_3_0() { return cFromAirportCrossReference_3_0; }
		
		//ID
		public RuleCall getFromAirportIDTerminalRuleCall_3_0_1() { return cFromAirportIDTerminalRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//to=[Airport]
		public Assignment getToAssignment_5() { return cToAssignment_5; }
		
		//[Airport]
		public CrossReference getToAirportCrossReference_5_0() { return cToAirportCrossReference_5_0; }
		
		//ID
		public RuleCall getToAirportIDTerminalRuleCall_5_0_1() { return cToAirportIDTerminalRuleCall_5_0_1; }
		
		//'with'
		public Keyword getWithKeyword_6() { return cWithKeyword_6; }
		
		//airline=[Airline]
		public Assignment getAirlineAssignment_7() { return cAirlineAssignment_7; }
		
		//[Airline]
		public CrossReference getAirlineAirlineCrossReference_7_0() { return cAirlineAirlineCrossReference_7_0; }
		
		//ID
		public RuleCall getAirlineAirlineIDTerminalRuleCall_7_0_1() { return cAirlineAirlineIDTerminalRuleCall_7_0_1; }
		
		//'at'
		public Keyword getAtKeyword_8() { return cAtKeyword_8; }
		
		//time=STRING
		public Assignment getTimeAssignment_9() { return cTimeAssignment_9; }
		
		//STRING
		public RuleCall getTimeSTRINGTerminalRuleCall_9_0() { return cTimeSTRINGTerminalRuleCall_9_0; }
	}
	public class SpecificFlightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.SpecificFlight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFnameSTRINGTerminalRuleCall_2_0 = (RuleCall)cFnameAssignment_2.eContents().get(0);
		private final Keyword cScheduledFlightKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cScheduledFlightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cScheduledFlightScheduledFlightCrossReference_4_0 = (CrossReference)cScheduledFlightAssignment_4.eContents().get(0);
		private final RuleCall cScheduledFlightScheduledFlightIDTerminalRuleCall_4_0_1 = (RuleCall)cScheduledFlightScheduledFlightCrossReference_4_0.eContents().get(1);
		private final Keyword cOnKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDateSTRINGTerminalRuleCall_6_0 = (RuleCall)cDateAssignment_6.eContents().get(0);
		private final Keyword cPilotKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cPilotAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cPilotPilotCrossReference_8_0 = (CrossReference)cPilotAssignment_8.eContents().get(0);
		private final RuleCall cPilotPilotIDTerminalRuleCall_8_0_1 = (RuleCall)cPilotPilotCrossReference_8_0.eContents().get(1);
		private final Keyword cAirplaneKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cPlaneAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cPlaneAirplaneCrossReference_10_0 = (CrossReference)cPlaneAssignment_10.eContents().get(0);
		private final RuleCall cPlaneAirplaneIDTerminalRuleCall_10_0_1 = (RuleCall)cPlaneAirplaneCrossReference_10_0.eContents().get(1);
		private final Keyword cStaffKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cStaffAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final CrossReference cStaffFlightAttendantCrossReference_12_0 = (CrossReference)cStaffAssignment_12.eContents().get(0);
		private final RuleCall cStaffFlightAttendantIDTerminalRuleCall_12_0_1 = (RuleCall)cStaffFlightAttendantCrossReference_12_0.eContents().get(1);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cStaffAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final CrossReference cStaffFlightAttendantCrossReference_13_1_0 = (CrossReference)cStaffAssignment_13_1.eContents().get(0);
		private final RuleCall cStaffFlightAttendantIDTerminalRuleCall_13_1_0_1 = (RuleCall)cStaffFlightAttendantCrossReference_13_1_0.eContents().get(1);
		
		//SpecificFlight:
		//    'Flight' name=ID fname=STRING
		//    //Get two existing airports (from and to)
		//    //Get an existing airline
		//    //Add a time and a date
		//    'scheduledFlight' scheduledFlight=[ScheduledFlight]
		//    'on' date=STRING
		//    'pilot' pilot=[Pilot]
		//    'airplane' plane=[Airplane]
		//    'staff' (staff+=[FlightAttendant]) (',' (staff+=[FlightAttendant]))*  //this might not work, need more than 1
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Flight' name=ID fname=STRING
		////Get two existing airports (from and to)
		////Get an existing airline
		////Add a time and a date
		//'scheduledFlight' scheduledFlight=[ScheduledFlight]
		//'on' date=STRING
		//'pilot' pilot=[Pilot]
		//'airplane' plane=[Airplane]
		//'staff' (staff+=[FlightAttendant]) (',' (staff+=[FlightAttendant]))*
		public Group getGroup() { return cGroup; }
		
		//'Flight'
		public Keyword getFlightKeyword_0() { return cFlightKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//fname=STRING
		public Assignment getFnameAssignment_2() { return cFnameAssignment_2; }
		
		//STRING
		public RuleCall getFnameSTRINGTerminalRuleCall_2_0() { return cFnameSTRINGTerminalRuleCall_2_0; }
		
		////Get two existing airports (from and to)
		////Get an existing airline
		////Add a time and a date
		//'scheduledFlight'
		public Keyword getScheduledFlightKeyword_3() { return cScheduledFlightKeyword_3; }
		
		//scheduledFlight=[ScheduledFlight]
		public Assignment getScheduledFlightAssignment_4() { return cScheduledFlightAssignment_4; }
		
		//[ScheduledFlight]
		public CrossReference getScheduledFlightScheduledFlightCrossReference_4_0() { return cScheduledFlightScheduledFlightCrossReference_4_0; }
		
		//ID
		public RuleCall getScheduledFlightScheduledFlightIDTerminalRuleCall_4_0_1() { return cScheduledFlightScheduledFlightIDTerminalRuleCall_4_0_1; }
		
		//'on'
		public Keyword getOnKeyword_5() { return cOnKeyword_5; }
		
		//date=STRING
		public Assignment getDateAssignment_6() { return cDateAssignment_6; }
		
		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_6_0() { return cDateSTRINGTerminalRuleCall_6_0; }
		
		//'pilot'
		public Keyword getPilotKeyword_7() { return cPilotKeyword_7; }
		
		//pilot=[Pilot]
		public Assignment getPilotAssignment_8() { return cPilotAssignment_8; }
		
		//[Pilot]
		public CrossReference getPilotPilotCrossReference_8_0() { return cPilotPilotCrossReference_8_0; }
		
		//ID
		public RuleCall getPilotPilotIDTerminalRuleCall_8_0_1() { return cPilotPilotIDTerminalRuleCall_8_0_1; }
		
		//'airplane'
		public Keyword getAirplaneKeyword_9() { return cAirplaneKeyword_9; }
		
		//plane=[Airplane]
		public Assignment getPlaneAssignment_10() { return cPlaneAssignment_10; }
		
		//[Airplane]
		public CrossReference getPlaneAirplaneCrossReference_10_0() { return cPlaneAirplaneCrossReference_10_0; }
		
		//ID
		public RuleCall getPlaneAirplaneIDTerminalRuleCall_10_0_1() { return cPlaneAirplaneIDTerminalRuleCall_10_0_1; }
		
		//'staff'
		public Keyword getStaffKeyword_11() { return cStaffKeyword_11; }
		
		//(staff+=[FlightAttendant])
		public Assignment getStaffAssignment_12() { return cStaffAssignment_12; }
		
		//[FlightAttendant]
		public CrossReference getStaffFlightAttendantCrossReference_12_0() { return cStaffFlightAttendantCrossReference_12_0; }
		
		//ID
		public RuleCall getStaffFlightAttendantIDTerminalRuleCall_12_0_1() { return cStaffFlightAttendantIDTerminalRuleCall_12_0_1; }
		
		//(',' (staff+=[FlightAttendant]))*
		public Group getGroup_13() { return cGroup_13; }
		
		//','
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }
		
		//(staff+=[FlightAttendant])
		public Assignment getStaffAssignment_13_1() { return cStaffAssignment_13_1; }
		
		//[FlightAttendant]
		public CrossReference getStaffFlightAttendantCrossReference_13_1_0() { return cStaffFlightAttendantCrossReference_13_1_0; }
		
		//ID
		public RuleCall getStaffFlightAttendantIDTerminalRuleCall_13_1_0_1() { return cStaffFlightAttendantIDTerminalRuleCall_13_1_0_1; }
	}
	public class ScheduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Schedule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFlightsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpecificFlightsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSpecificFlightsSpecificFlightCrossReference_3_0 = (CrossReference)cSpecificFlightsAssignment_3.eContents().get(0);
		private final RuleCall cSpecificFlightsSpecificFlightIDTerminalRuleCall_3_0_1 = (RuleCall)cSpecificFlightsSpecificFlightCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSpecificFlightsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSpecificFlightsSpecificFlightCrossReference_4_1_0 = (CrossReference)cSpecificFlightsAssignment_4_1.eContents().get(0);
		private final RuleCall cSpecificFlightsSpecificFlightIDTerminalRuleCall_4_1_0_1 = (RuleCall)cSpecificFlightsSpecificFlightCrossReference_4_1_0.eContents().get(1);
		
		//Schedule:
		//    name=ID 'with' 'flights' (specificFlights+=[SpecificFlight]) (',' (specificFlights+=[SpecificFlight]))*
		//    //Get a bunch of flights, and add flights to schedule
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'with' 'flights' (specificFlights+=[SpecificFlight]) (',' (specificFlights+=[SpecificFlight]))*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//'flights'
		public Keyword getFlightsKeyword_2() { return cFlightsKeyword_2; }
		
		//(specificFlights+=[SpecificFlight])
		public Assignment getSpecificFlightsAssignment_3() { return cSpecificFlightsAssignment_3; }
		
		//[SpecificFlight]
		public CrossReference getSpecificFlightsSpecificFlightCrossReference_3_0() { return cSpecificFlightsSpecificFlightCrossReference_3_0; }
		
		//ID
		public RuleCall getSpecificFlightsSpecificFlightIDTerminalRuleCall_3_0_1() { return cSpecificFlightsSpecificFlightIDTerminalRuleCall_3_0_1; }
		
		//(',' (specificFlights+=[SpecificFlight]))*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//(specificFlights+=[SpecificFlight])
		public Assignment getSpecificFlightsAssignment_4_1() { return cSpecificFlightsAssignment_4_1; }
		
		//[SpecificFlight]
		public CrossReference getSpecificFlightsSpecificFlightCrossReference_4_1_0() { return cSpecificFlightsSpecificFlightCrossReference_4_1_0; }
		
		//ID
		public RuleCall getSpecificFlightsSpecificFlightIDTerminalRuleCall_4_1_0_1() { return cSpecificFlightsSpecificFlightIDTerminalRuleCall_4_1_0_1; }
	}
	public class EmployeeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Employee");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPilotParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFlightAttendantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBagHandlerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGatePersonnelParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Employee:
		//    //Super type, extend to subtypes kinda of like entity thing
		//    // Realte each subtype to their respective airports, or flights
		//    Pilot | FlightAttendant | BagHandler | GatePersonnel
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////Super type, extend to subtypes kinda of like entity thing
		//// Realte each subtype to their respective airports, or flights
		//Pilot | FlightAttendant | BagHandler | GatePersonnel
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////Super type, extend to subtypes kinda of like entity thing
		//// Realte each subtype to their respective airports, or flights
		//Pilot
		public RuleCall getPilotParserRuleCall_0() { return cPilotParserRuleCall_0; }
		
		//FlightAttendant
		public RuleCall getFlightAttendantParserRuleCall_1() { return cFlightAttendantParserRuleCall_1; }
		
		//BagHandler
		public RuleCall getBagHandlerParserRuleCall_2() { return cBagHandlerParserRuleCall_2; }
		
		//GatePersonnel
		public RuleCall getGatePersonnelParserRuleCall_3() { return cGatePersonnelParserRuleCall_3; }
	}
	public class PilotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Pilot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPilotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPinameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPinameSTRINGTerminalRuleCall_2_0 = (RuleCall)cPinameAssignment_2.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAirlineAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAirlineAirlineCrossReference_4_0 = (CrossReference)cAirlineAssignment_4.eContents().get(0);
		private final RuleCall cAirlineAirlineIDTerminalRuleCall_4_0_1 = (RuleCall)cAirlineAirlineCrossReference_4_0.eContents().get(1);
		
		//Pilot:
		//    'Pilot' name=ID piname=STRING 'with' airline=[Airline]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Pilot' name=ID piname=STRING 'with' airline=[Airline]
		public Group getGroup() { return cGroup; }
		
		//'Pilot'
		public Keyword getPilotKeyword_0() { return cPilotKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//piname=STRING
		public Assignment getPinameAssignment_2() { return cPinameAssignment_2; }
		
		//STRING
		public RuleCall getPinameSTRINGTerminalRuleCall_2_0() { return cPinameSTRINGTerminalRuleCall_2_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//airline=[Airline]
		public Assignment getAirlineAssignment_4() { return cAirlineAssignment_4; }
		
		//[Airline]
		public CrossReference getAirlineAirlineCrossReference_4_0() { return cAirlineAirlineCrossReference_4_0; }
		
		//ID
		public RuleCall getAirlineAirlineIDTerminalRuleCall_4_0_1() { return cAirlineAirlineIDTerminalRuleCall_4_0_1; }
	}
	public class FlightAttendantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.FlightAttendant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlightAttendantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFanameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFanameSTRINGTerminalRuleCall_2_0 = (RuleCall)cFanameAssignment_2.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAirlineAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAirlineAirlineCrossReference_4_0 = (CrossReference)cAirlineAssignment_4.eContents().get(0);
		private final RuleCall cAirlineAirlineIDTerminalRuleCall_4_0_1 = (RuleCall)cAirlineAirlineCrossReference_4_0.eContents().get(1);
		
		//FlightAttendant:
		//    'FlightAttendant' name=ID faname=STRING 'with' airline=[Airline]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'FlightAttendant' name=ID faname=STRING 'with' airline=[Airline]
		public Group getGroup() { return cGroup; }
		
		//'FlightAttendant'
		public Keyword getFlightAttendantKeyword_0() { return cFlightAttendantKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//faname=STRING
		public Assignment getFanameAssignment_2() { return cFanameAssignment_2; }
		
		//STRING
		public RuleCall getFanameSTRINGTerminalRuleCall_2_0() { return cFanameSTRINGTerminalRuleCall_2_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//airline=[Airline]
		public Assignment getAirlineAssignment_4() { return cAirlineAssignment_4; }
		
		//[Airline]
		public CrossReference getAirlineAirlineCrossReference_4_0() { return cAirlineAirlineCrossReference_4_0; }
		
		//ID
		public RuleCall getAirlineAirlineIDTerminalRuleCall_4_0_1() { return cAirlineAirlineIDTerminalRuleCall_4_0_1; }
	}
	public class BagHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.BagHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBagHandlerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBhnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBhnameSTRINGTerminalRuleCall_2_0 = (RuleCall)cBhnameAssignment_2.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAirportAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAirportAirportCrossReference_4_0 = (CrossReference)cAirportAssignment_4.eContents().get(0);
		private final RuleCall cAirportAirportIDTerminalRuleCall_4_0_1 = (RuleCall)cAirportAirportCrossReference_4_0.eContents().get(1);
		
		//BagHandler:
		//    'BagHandler' name=ID bhname=STRING 'with' airport=[Airport]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'BagHandler' name=ID bhname=STRING 'with' airport=[Airport]
		public Group getGroup() { return cGroup; }
		
		//'BagHandler'
		public Keyword getBagHandlerKeyword_0() { return cBagHandlerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//bhname=STRING
		public Assignment getBhnameAssignment_2() { return cBhnameAssignment_2; }
		
		//STRING
		public RuleCall getBhnameSTRINGTerminalRuleCall_2_0() { return cBhnameSTRINGTerminalRuleCall_2_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//airport=[Airport]
		public Assignment getAirportAssignment_4() { return cAirportAssignment_4; }
		
		//[Airport]
		public CrossReference getAirportAirportCrossReference_4_0() { return cAirportAirportCrossReference_4_0; }
		
		//ID
		public RuleCall getAirportAirportIDTerminalRuleCall_4_0_1() { return cAirportAirportIDTerminalRuleCall_4_0_1; }
	}
	public class GatePersonnelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.GatePersonnel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGatePersonnelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cGpnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGpnameSTRINGTerminalRuleCall_2_0 = (RuleCall)cGpnameAssignment_2.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAirportAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAirportAirportCrossReference_4_0 = (CrossReference)cAirportAssignment_4.eContents().get(0);
		private final RuleCall cAirportAirportIDTerminalRuleCall_4_0_1 = (RuleCall)cAirportAirportCrossReference_4_0.eContents().get(1);
		
		//GatePersonnel:
		//    'GatePersonnel' name=ID gpname=STRING 'with' airport=[Airport]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'GatePersonnel' name=ID gpname=STRING 'with' airport=[Airport]
		public Group getGroup() { return cGroup; }
		
		//'GatePersonnel'
		public Keyword getGatePersonnelKeyword_0() { return cGatePersonnelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//gpname=STRING
		public Assignment getGpnameAssignment_2() { return cGpnameAssignment_2; }
		
		//STRING
		public RuleCall getGpnameSTRINGTerminalRuleCall_2_0() { return cGpnameSTRINGTerminalRuleCall_2_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//airport=[Airport]
		public Assignment getAirportAssignment_4() { return cAirportAssignment_4; }
		
		//[Airport]
		public CrossReference getAirportAirportCrossReference_4_0() { return cAirportAirportCrossReference_4_0; }
		
		//ID
		public RuleCall getAirportAirportIDTerminalRuleCall_4_0_1() { return cAirportAirportIDTerminalRuleCall_4_0_1; }
	}
	public class PassengerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.airlineregistration.Air.Passenger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPassengerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPanameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPanameSTRINGTerminalRuleCall_2_0 = (RuleCall)cPanameAssignment_2.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSpecificFlightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSpecificFlightSpecificFlightCrossReference_4_0 = (CrossReference)cSpecificFlightAssignment_4.eContents().get(0);
		private final RuleCall cSpecificFlightSpecificFlightIDTerminalRuleCall_4_0_1 = (RuleCall)cSpecificFlightSpecificFlightCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSpecificFlightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSpecificFlightSpecificFlightCrossReference_5_1_0 = (CrossReference)cSpecificFlightAssignment_5_1.eContents().get(0);
		private final RuleCall cSpecificFlightSpecificFlightIDTerminalRuleCall_5_1_0_1 = (RuleCall)cSpecificFlightSpecificFlightCrossReference_5_1_0.eContents().get(1);
		
		//Passenger:
		//    'Passenger' name=STRING paname=STRING 'with' (specificFlight+=[SpecificFlight]) (',' (specificFlight+=[SpecificFlight]))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Passenger' name=STRING paname=STRING 'with' (specificFlight+=[SpecificFlight]) (',' (specificFlight+=[SpecificFlight]))*
		public Group getGroup() { return cGroup; }
		
		//'Passenger'
		public Keyword getPassengerKeyword_0() { return cPassengerKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//paname=STRING
		public Assignment getPanameAssignment_2() { return cPanameAssignment_2; }
		
		//STRING
		public RuleCall getPanameSTRINGTerminalRuleCall_2_0() { return cPanameSTRINGTerminalRuleCall_2_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//(specificFlight+=[SpecificFlight])
		public Assignment getSpecificFlightAssignment_4() { return cSpecificFlightAssignment_4; }
		
		//[SpecificFlight]
		public CrossReference getSpecificFlightSpecificFlightCrossReference_4_0() { return cSpecificFlightSpecificFlightCrossReference_4_0; }
		
		//ID
		public RuleCall getSpecificFlightSpecificFlightIDTerminalRuleCall_4_0_1() { return cSpecificFlightSpecificFlightIDTerminalRuleCall_4_0_1; }
		
		//(',' (specificFlight+=[SpecificFlight]))*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//(specificFlight+=[SpecificFlight])
		public Assignment getSpecificFlightAssignment_5_1() { return cSpecificFlightAssignment_5_1; }
		
		//[SpecificFlight]
		public CrossReference getSpecificFlightSpecificFlightCrossReference_5_1_0() { return cSpecificFlightSpecificFlightCrossReference_5_1_0; }
		
		//ID
		public RuleCall getSpecificFlightSpecificFlightIDTerminalRuleCall_5_1_0_1() { return cSpecificFlightSpecificFlightIDTerminalRuleCall_5_1_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final EntityElements pEntity;
	private final AirportElements pAirport;
	private final AirlineElements pAirline;
	private final AirplaneElements pAirplane;
	private final ScheduledFlightElements pScheduledFlight;
	private final SpecificFlightElements pSpecificFlight;
	private final ScheduleElements pSchedule;
	private final EmployeeElements pEmployee;
	private final PilotElements pPilot;
	private final FlightAttendantElements pFlightAttendant;
	private final BagHandlerElements pBagHandler;
	private final GatePersonnelElements pGatePersonnel;
	private final PassengerElements pPassenger;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AirGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEntity = new EntityElements();
		this.pAirport = new AirportElements();
		this.pAirline = new AirlineElements();
		this.pAirplane = new AirplaneElements();
		this.pScheduledFlight = new ScheduledFlightElements();
		this.pSpecificFlight = new SpecificFlightElements();
		this.pSchedule = new ScheduleElements();
		this.pEmployee = new EmployeeElements();
		this.pPilot = new PilotElements();
		this.pFlightAttendant = new FlightAttendantElements();
		this.pBagHandler = new BagHandlerElements();
		this.pGatePersonnel = new GatePersonnelElements();
		this.pPassenger = new PassengerElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.airlineregistration.Air".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model :
	//    entities+=Entity*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Entity:
	//    Airport | Airline | ScheduledFlight | SpecificFlight | Schedule | Employee | Airplane | Passenger
	//;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Airport :
	//    //Example: Airport YUL 'Pierre Trudeau'
	//    'Airport' name=ID aname=STRING location=STRING
	//;
	public AirportElements getAirportAccess() {
		return pAirport;
	}
	
	public ParserRule getAirportRule() {
		return getAirportAccess().getRule();
	}
	
	//Airline:
	//    //Example: Airline AirCanada 'flights out of canada'
	//    'Airline' name=ID description=STRING
	//;
	public AirlineElements getAirlineAccess() {
		return pAirline;
	}
	
	public ParserRule getAirlineRule() {
		return getAirlineAccess().getRule();
	}
	
	//Airplane:
	//    'Airplane' name=ID type=STRING seats=INT
	//;
	public AirplaneElements getAirplaneAccess() {
		return pAirplane;
	}
	
	public ParserRule getAirplaneRule() {
		return getAirplaneAccess().getRule();
	}
	
	//ScheduledFlight:
	//    'ScheduledFlight' name=ID
	//    'from' from=[Airport]
	//    'to' to=[Airport]
	//    'with' airline=[Airline]
	//    'at' time=STRING
	//;
	public ScheduledFlightElements getScheduledFlightAccess() {
		return pScheduledFlight;
	}
	
	public ParserRule getScheduledFlightRule() {
		return getScheduledFlightAccess().getRule();
	}
	
	//SpecificFlight:
	//    'Flight' name=ID fname=STRING
	//    //Get two existing airports (from and to)
	//    //Get an existing airline
	//    //Add a time and a date
	//    'scheduledFlight' scheduledFlight=[ScheduledFlight]
	//    'on' date=STRING
	//    'pilot' pilot=[Pilot]
	//    'airplane' plane=[Airplane]
	//    'staff' (staff+=[FlightAttendant]) (',' (staff+=[FlightAttendant]))*  //this might not work, need more than 1
	//;
	public SpecificFlightElements getSpecificFlightAccess() {
		return pSpecificFlight;
	}
	
	public ParserRule getSpecificFlightRule() {
		return getSpecificFlightAccess().getRule();
	}
	
	//Schedule:
	//    name=ID 'with' 'flights' (specificFlights+=[SpecificFlight]) (',' (specificFlights+=[SpecificFlight]))*
	//    //Get a bunch of flights, and add flights to schedule
	//;
	public ScheduleElements getScheduleAccess() {
		return pSchedule;
	}
	
	public ParserRule getScheduleRule() {
		return getScheduleAccess().getRule();
	}
	
	//Employee:
	//    //Super type, extend to subtypes kinda of like entity thing
	//    // Realte each subtype to their respective airports, or flights
	//    Pilot | FlightAttendant | BagHandler | GatePersonnel
	//;
	public EmployeeElements getEmployeeAccess() {
		return pEmployee;
	}
	
	public ParserRule getEmployeeRule() {
		return getEmployeeAccess().getRule();
	}
	
	//Pilot:
	//    'Pilot' name=ID piname=STRING 'with' airline=[Airline]
	//;
	public PilotElements getPilotAccess() {
		return pPilot;
	}
	
	public ParserRule getPilotRule() {
		return getPilotAccess().getRule();
	}
	
	//FlightAttendant:
	//    'FlightAttendant' name=ID faname=STRING 'with' airline=[Airline]
	//;
	public FlightAttendantElements getFlightAttendantAccess() {
		return pFlightAttendant;
	}
	
	public ParserRule getFlightAttendantRule() {
		return getFlightAttendantAccess().getRule();
	}
	
	//BagHandler:
	//    'BagHandler' name=ID bhname=STRING 'with' airport=[Airport]
	//;
	public BagHandlerElements getBagHandlerAccess() {
		return pBagHandler;
	}
	
	public ParserRule getBagHandlerRule() {
		return getBagHandlerAccess().getRule();
	}
	
	//GatePersonnel:
	//    'GatePersonnel' name=ID gpname=STRING 'with' airport=[Airport]
	//;
	public GatePersonnelElements getGatePersonnelAccess() {
		return pGatePersonnel;
	}
	
	public ParserRule getGatePersonnelRule() {
		return getGatePersonnelAccess().getRule();
	}
	
	//Passenger:
	//    'Passenger' name=STRING paname=STRING 'with' (specificFlight+=[SpecificFlight]) (',' (specificFlight+=[SpecificFlight]))*
	//;
	public PassengerElements getPassengerAccess() {
		return pPassenger;
	}
	
	public ParserRule getPassengerRule() {
		return getPassengerAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
