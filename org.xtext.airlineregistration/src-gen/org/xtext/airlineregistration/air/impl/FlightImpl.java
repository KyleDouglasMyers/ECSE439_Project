/**
 * generated by Xtext 2.26.0
 */
package org.xtext.airlineregistration.air.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.airlineregistration.air.AirPackage;
import org.xtext.airlineregistration.air.Airline;
import org.xtext.airlineregistration.air.Airport;
import org.xtext.airlineregistration.air.Flight;
import org.xtext.airlineregistration.air.FlightAttendant;
import org.xtext.airlineregistration.air.Pilot;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Flight</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.airlineregistration.air.impl.FlightImpl#getFrom <em>From</em>}</li>
 *   <li>{@link org.xtext.airlineregistration.air.impl.FlightImpl#getTo <em>To</em>}</li>
 *   <li>{@link org.xtext.airlineregistration.air.impl.FlightImpl#getAirline <em>Airline</em>}</li>
 *   <li>{@link org.xtext.airlineregistration.air.impl.FlightImpl#getTime <em>Time</em>}</li>
 *   <li>{@link org.xtext.airlineregistration.air.impl.FlightImpl#getPilot <em>Pilot</em>}</li>
 *   <li>{@link org.xtext.airlineregistration.air.impl.FlightImpl#getStaff <em>Staff</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FlightImpl extends EntityImpl implements Flight
{
  /**
   * The cached value of the '{@link #getFrom() <em>From</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFrom()
   * @generated
   * @ordered
   */
  protected Airport from;

  /**
   * The cached value of the '{@link #getTo() <em>To</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTo()
   * @generated
   * @ordered
   */
  protected Airport to;

  /**
   * The cached value of the '{@link #getAirline() <em>Airline</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAirline()
   * @generated
   * @ordered
   */
  protected Airline airline;

  /**
   * The default value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected static final String TIME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected String time = TIME_EDEFAULT;

  /**
   * The cached value of the '{@link #getPilot() <em>Pilot</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPilot()
   * @generated
   * @ordered
   */
  protected Pilot pilot;

  /**
   * The cached value of the '{@link #getStaff() <em>Staff</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStaff()
   * @generated
   * @ordered
   */
  protected EList<FlightAttendant> staff;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FlightImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AirPackage.Literals.FLIGHT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Airport getFrom()
  {
    if (from != null && from.eIsProxy())
    {
      InternalEObject oldFrom = (InternalEObject)from;
      from = (Airport)eResolveProxy(oldFrom);
      if (from != oldFrom)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AirPackage.FLIGHT__FROM, oldFrom, from));
      }
    }
    return from;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Airport basicGetFrom()
  {
    return from;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFrom(Airport newFrom)
  {
    Airport oldFrom = from;
    from = newFrom;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirPackage.FLIGHT__FROM, oldFrom, from));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Airport getTo()
  {
    if (to != null && to.eIsProxy())
    {
      InternalEObject oldTo = (InternalEObject)to;
      to = (Airport)eResolveProxy(oldTo);
      if (to != oldTo)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AirPackage.FLIGHT__TO, oldTo, to));
      }
    }
    return to;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Airport basicGetTo()
  {
    return to;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTo(Airport newTo)
  {
    Airport oldTo = to;
    to = newTo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirPackage.FLIGHT__TO, oldTo, to));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Airline getAirline()
  {
    if (airline != null && airline.eIsProxy())
    {
      InternalEObject oldAirline = (InternalEObject)airline;
      airline = (Airline)eResolveProxy(oldAirline);
      if (airline != oldAirline)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AirPackage.FLIGHT__AIRLINE, oldAirline, airline));
      }
    }
    return airline;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Airline basicGetAirline()
  {
    return airline;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAirline(Airline newAirline)
  {
    Airline oldAirline = airline;
    airline = newAirline;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirPackage.FLIGHT__AIRLINE, oldAirline, airline));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTime(String newTime)
  {
    String oldTime = time;
    time = newTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirPackage.FLIGHT__TIME, oldTime, time));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pilot getPilot()
  {
    if (pilot != null && pilot.eIsProxy())
    {
      InternalEObject oldPilot = (InternalEObject)pilot;
      pilot = (Pilot)eResolveProxy(oldPilot);
      if (pilot != oldPilot)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AirPackage.FLIGHT__PILOT, oldPilot, pilot));
      }
    }
    return pilot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pilot basicGetPilot()
  {
    return pilot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPilot(Pilot newPilot)
  {
    Pilot oldPilot = pilot;
    pilot = newPilot;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirPackage.FLIGHT__PILOT, oldPilot, pilot));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FlightAttendant> getStaff()
  {
    if (staff == null)
    {
      staff = new EObjectContainmentEList<FlightAttendant>(FlightAttendant.class, this, AirPackage.FLIGHT__STAFF);
    }
    return staff;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AirPackage.FLIGHT__STAFF:
        return ((InternalEList<?>)getStaff()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AirPackage.FLIGHT__FROM:
        if (resolve) return getFrom();
        return basicGetFrom();
      case AirPackage.FLIGHT__TO:
        if (resolve) return getTo();
        return basicGetTo();
      case AirPackage.FLIGHT__AIRLINE:
        if (resolve) return getAirline();
        return basicGetAirline();
      case AirPackage.FLIGHT__TIME:
        return getTime();
      case AirPackage.FLIGHT__PILOT:
        if (resolve) return getPilot();
        return basicGetPilot();
      case AirPackage.FLIGHT__STAFF:
        return getStaff();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AirPackage.FLIGHT__FROM:
        setFrom((Airport)newValue);
        return;
      case AirPackage.FLIGHT__TO:
        setTo((Airport)newValue);
        return;
      case AirPackage.FLIGHT__AIRLINE:
        setAirline((Airline)newValue);
        return;
      case AirPackage.FLIGHT__TIME:
        setTime((String)newValue);
        return;
      case AirPackage.FLIGHT__PILOT:
        setPilot((Pilot)newValue);
        return;
      case AirPackage.FLIGHT__STAFF:
        getStaff().clear();
        getStaff().addAll((Collection<? extends FlightAttendant>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AirPackage.FLIGHT__FROM:
        setFrom((Airport)null);
        return;
      case AirPackage.FLIGHT__TO:
        setTo((Airport)null);
        return;
      case AirPackage.FLIGHT__AIRLINE:
        setAirline((Airline)null);
        return;
      case AirPackage.FLIGHT__TIME:
        setTime(TIME_EDEFAULT);
        return;
      case AirPackage.FLIGHT__PILOT:
        setPilot((Pilot)null);
        return;
      case AirPackage.FLIGHT__STAFF:
        getStaff().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AirPackage.FLIGHT__FROM:
        return from != null;
      case AirPackage.FLIGHT__TO:
        return to != null;
      case AirPackage.FLIGHT__AIRLINE:
        return airline != null;
      case AirPackage.FLIGHT__TIME:
        return TIME_EDEFAULT == null ? time != null : !TIME_EDEFAULT.equals(time);
      case AirPackage.FLIGHT__PILOT:
        return pilot != null;
      case AirPackage.FLIGHT__STAFF:
        return staff != null && !staff.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (time: ");
    result.append(time);
    result.append(')');
    return result.toString();
  }

} //FlightImpl
