/**
 * generated by Xtext 2.26.0
 */
package org.xtext.airlineregistration.air.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.airlineregistration.air.AirPackage;
import org.xtext.airlineregistration.air.Airplane;
import org.xtext.airlineregistration.air.FlightAttendant;
import org.xtext.airlineregistration.air.Pilot;
import org.xtext.airlineregistration.air.ScheduledFlight;
import org.xtext.airlineregistration.air.SpecificFlight;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Specific Flight</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.airlineregistration.air.impl.SpecificFlightImpl#getFname <em>Fname</em>}</li>
 *   <li>{@link org.xtext.airlineregistration.air.impl.SpecificFlightImpl#getScheduledFlight <em>Scheduled Flight</em>}</li>
 *   <li>{@link org.xtext.airlineregistration.air.impl.SpecificFlightImpl#getDate <em>Date</em>}</li>
 *   <li>{@link org.xtext.airlineregistration.air.impl.SpecificFlightImpl#getPilot <em>Pilot</em>}</li>
 *   <li>{@link org.xtext.airlineregistration.air.impl.SpecificFlightImpl#getPlane <em>Plane</em>}</li>
 *   <li>{@link org.xtext.airlineregistration.air.impl.SpecificFlightImpl#getStaff <em>Staff</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SpecificFlightImpl extends EntityImpl implements SpecificFlight
{
  /**
   * The default value of the '{@link #getFname() <em>Fname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFname()
   * @generated
   * @ordered
   */
  protected static final String FNAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFname() <em>Fname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFname()
   * @generated
   * @ordered
   */
  protected String fname = FNAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getScheduledFlight() <em>Scheduled Flight</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScheduledFlight()
   * @generated
   * @ordered
   */
  protected ScheduledFlight scheduledFlight;

  /**
   * The default value of the '{@link #getDate() <em>Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDate()
   * @generated
   * @ordered
   */
  protected static final String DATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDate() <em>Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDate()
   * @generated
   * @ordered
   */
  protected String date = DATE_EDEFAULT;

  /**
   * The cached value of the '{@link #getPilot() <em>Pilot</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPilot()
   * @generated
   * @ordered
   */
  protected Pilot pilot;

  /**
   * The cached value of the '{@link #getPlane() <em>Plane</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlane()
   * @generated
   * @ordered
   */
  protected Airplane plane;

  /**
   * The cached value of the '{@link #getStaff() <em>Staff</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStaff()
   * @generated
   * @ordered
   */
  protected EList<FlightAttendant> staff;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpecificFlightImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AirPackage.Literals.SPECIFIC_FLIGHT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFname()
  {
    return fname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFname(String newFname)
  {
    String oldFname = fname;
    fname = newFname;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirPackage.SPECIFIC_FLIGHT__FNAME, oldFname, fname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScheduledFlight getScheduledFlight()
  {
    if (scheduledFlight != null && scheduledFlight.eIsProxy())
    {
      InternalEObject oldScheduledFlight = (InternalEObject)scheduledFlight;
      scheduledFlight = (ScheduledFlight)eResolveProxy(oldScheduledFlight);
      if (scheduledFlight != oldScheduledFlight)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AirPackage.SPECIFIC_FLIGHT__SCHEDULED_FLIGHT, oldScheduledFlight, scheduledFlight));
      }
    }
    return scheduledFlight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScheduledFlight basicGetScheduledFlight()
  {
    return scheduledFlight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScheduledFlight(ScheduledFlight newScheduledFlight)
  {
    ScheduledFlight oldScheduledFlight = scheduledFlight;
    scheduledFlight = newScheduledFlight;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirPackage.SPECIFIC_FLIGHT__SCHEDULED_FLIGHT, oldScheduledFlight, scheduledFlight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDate()
  {
    return date;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDate(String newDate)
  {
    String oldDate = date;
    date = newDate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirPackage.SPECIFIC_FLIGHT__DATE, oldDate, date));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pilot getPilot()
  {
    if (pilot != null && pilot.eIsProxy())
    {
      InternalEObject oldPilot = (InternalEObject)pilot;
      pilot = (Pilot)eResolveProxy(oldPilot);
      if (pilot != oldPilot)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AirPackage.SPECIFIC_FLIGHT__PILOT, oldPilot, pilot));
      }
    }
    return pilot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pilot basicGetPilot()
  {
    return pilot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPilot(Pilot newPilot)
  {
    Pilot oldPilot = pilot;
    pilot = newPilot;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirPackage.SPECIFIC_FLIGHT__PILOT, oldPilot, pilot));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Airplane getPlane()
  {
    if (plane != null && plane.eIsProxy())
    {
      InternalEObject oldPlane = (InternalEObject)plane;
      plane = (Airplane)eResolveProxy(oldPlane);
      if (plane != oldPlane)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AirPackage.SPECIFIC_FLIGHT__PLANE, oldPlane, plane));
      }
    }
    return plane;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Airplane basicGetPlane()
  {
    return plane;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPlane(Airplane newPlane)
  {
    Airplane oldPlane = plane;
    plane = newPlane;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirPackage.SPECIFIC_FLIGHT__PLANE, oldPlane, plane));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FlightAttendant> getStaff()
  {
    if (staff == null)
    {
      staff = new EObjectResolvingEList<FlightAttendant>(FlightAttendant.class, this, AirPackage.SPECIFIC_FLIGHT__STAFF);
    }
    return staff;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AirPackage.SPECIFIC_FLIGHT__FNAME:
        return getFname();
      case AirPackage.SPECIFIC_FLIGHT__SCHEDULED_FLIGHT:
        if (resolve) return getScheduledFlight();
        return basicGetScheduledFlight();
      case AirPackage.SPECIFIC_FLIGHT__DATE:
        return getDate();
      case AirPackage.SPECIFIC_FLIGHT__PILOT:
        if (resolve) return getPilot();
        return basicGetPilot();
      case AirPackage.SPECIFIC_FLIGHT__PLANE:
        if (resolve) return getPlane();
        return basicGetPlane();
      case AirPackage.SPECIFIC_FLIGHT__STAFF:
        return getStaff();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AirPackage.SPECIFIC_FLIGHT__FNAME:
        setFname((String)newValue);
        return;
      case AirPackage.SPECIFIC_FLIGHT__SCHEDULED_FLIGHT:
        setScheduledFlight((ScheduledFlight)newValue);
        return;
      case AirPackage.SPECIFIC_FLIGHT__DATE:
        setDate((String)newValue);
        return;
      case AirPackage.SPECIFIC_FLIGHT__PILOT:
        setPilot((Pilot)newValue);
        return;
      case AirPackage.SPECIFIC_FLIGHT__PLANE:
        setPlane((Airplane)newValue);
        return;
      case AirPackage.SPECIFIC_FLIGHT__STAFF:
        getStaff().clear();
        getStaff().addAll((Collection<? extends FlightAttendant>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AirPackage.SPECIFIC_FLIGHT__FNAME:
        setFname(FNAME_EDEFAULT);
        return;
      case AirPackage.SPECIFIC_FLIGHT__SCHEDULED_FLIGHT:
        setScheduledFlight((ScheduledFlight)null);
        return;
      case AirPackage.SPECIFIC_FLIGHT__DATE:
        setDate(DATE_EDEFAULT);
        return;
      case AirPackage.SPECIFIC_FLIGHT__PILOT:
        setPilot((Pilot)null);
        return;
      case AirPackage.SPECIFIC_FLIGHT__PLANE:
        setPlane((Airplane)null);
        return;
      case AirPackage.SPECIFIC_FLIGHT__STAFF:
        getStaff().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AirPackage.SPECIFIC_FLIGHT__FNAME:
        return FNAME_EDEFAULT == null ? fname != null : !FNAME_EDEFAULT.equals(fname);
      case AirPackage.SPECIFIC_FLIGHT__SCHEDULED_FLIGHT:
        return scheduledFlight != null;
      case AirPackage.SPECIFIC_FLIGHT__DATE:
        return DATE_EDEFAULT == null ? date != null : !DATE_EDEFAULT.equals(date);
      case AirPackage.SPECIFIC_FLIGHT__PILOT:
        return pilot != null;
      case AirPackage.SPECIFIC_FLIGHT__PLANE:
        return plane != null;
      case AirPackage.SPECIFIC_FLIGHT__STAFF:
        return staff != null && !staff.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (fname: ");
    result.append(fname);
    result.append(", date: ");
    result.append(date);
    result.append(')');
    return result.toString();
  }

} //SpecificFlightImpl
