/**
 * generated by Xtext 2.26.0
 */
package org.xtext.airlineregistration.air.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.airlineregistration.air.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.airlineregistration.air.AirPackage
 * @generated
 */
public class AirSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AirPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AirSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = AirPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case AirPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AirPackage.ENTITY:
      {
        Entity entity = (Entity)theEObject;
        T result = caseEntity(entity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AirPackage.AIRPORT:
      {
        Airport airport = (Airport)theEObject;
        T result = caseAirport(airport);
        if (result == null) result = caseEntity(airport);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AirPackage.AIRLINE:
      {
        Airline airline = (Airline)theEObject;
        T result = caseAirline(airline);
        if (result == null) result = caseEntity(airline);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AirPackage.AIRPLANE:
      {
        Airplane airplane = (Airplane)theEObject;
        T result = caseAirplane(airplane);
        if (result == null) result = caseEntity(airplane);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AirPackage.SCHEDULED_FLIGHT:
      {
        ScheduledFlight scheduledFlight = (ScheduledFlight)theEObject;
        T result = caseScheduledFlight(scheduledFlight);
        if (result == null) result = caseEntity(scheduledFlight);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AirPackage.SPECIFIC_FLIGHT:
      {
        SpecificFlight specificFlight = (SpecificFlight)theEObject;
        T result = caseSpecificFlight(specificFlight);
        if (result == null) result = caseEntity(specificFlight);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AirPackage.SCHEDULE:
      {
        Schedule schedule = (Schedule)theEObject;
        T result = caseSchedule(schedule);
        if (result == null) result = caseEntity(schedule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AirPackage.EMPLOYEE:
      {
        Employee employee = (Employee)theEObject;
        T result = caseEmployee(employee);
        if (result == null) result = caseEntity(employee);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AirPackage.PILOT:
      {
        Pilot pilot = (Pilot)theEObject;
        T result = casePilot(pilot);
        if (result == null) result = caseEmployee(pilot);
        if (result == null) result = caseEntity(pilot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AirPackage.FLIGHT_ATTENDANT:
      {
        FlightAttendant flightAttendant = (FlightAttendant)theEObject;
        T result = caseFlightAttendant(flightAttendant);
        if (result == null) result = caseEmployee(flightAttendant);
        if (result == null) result = caseEntity(flightAttendant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AirPackage.BAG_HANDLER:
      {
        BagHandler bagHandler = (BagHandler)theEObject;
        T result = caseBagHandler(bagHandler);
        if (result == null) result = caseEmployee(bagHandler);
        if (result == null) result = caseEntity(bagHandler);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AirPackage.GATE_PERSONNEL:
      {
        GatePersonnel gatePersonnel = (GatePersonnel)theEObject;
        T result = caseGatePersonnel(gatePersonnel);
        if (result == null) result = caseEmployee(gatePersonnel);
        if (result == null) result = caseEntity(gatePersonnel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AirPackage.PASSENGER:
      {
        Passenger passenger = (Passenger)theEObject;
        T result = casePassenger(passenger);
        if (result == null) result = caseEntity(passenger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntity(Entity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Airport</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Airport</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAirport(Airport object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Airline</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Airline</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAirline(Airline object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Airplane</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Airplane</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAirplane(Airplane object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scheduled Flight</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scheduled Flight</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScheduledFlight(ScheduledFlight object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Specific Flight</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Specific Flight</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpecificFlight(SpecificFlight object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Schedule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Schedule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSchedule(Schedule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Employee</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Employee</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEmployee(Employee object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pilot</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pilot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePilot(Pilot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Flight Attendant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Flight Attendant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFlightAttendant(FlightAttendant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bag Handler</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bag Handler</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBagHandler(BagHandler object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Gate Personnel</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Gate Personnel</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGatePersonnel(GatePersonnel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Passenger</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Passenger</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePassenger(Passenger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //AirSwitch
