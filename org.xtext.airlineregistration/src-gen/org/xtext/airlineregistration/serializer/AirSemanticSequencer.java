/*
 * generated by Xtext 2.26.0
 */
package org.xtext.airlineregistration.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.airlineregistration.air.AirPackage;
import org.xtext.airlineregistration.air.Airline;
import org.xtext.airlineregistration.air.Airport;
import org.xtext.airlineregistration.air.BagHandler;
import org.xtext.airlineregistration.air.Flight;
import org.xtext.airlineregistration.air.FlightAttendant;
import org.xtext.airlineregistration.air.GatePersonnel;
import org.xtext.airlineregistration.air.Model;
import org.xtext.airlineregistration.air.Pilot;
import org.xtext.airlineregistration.air.Schedule;
import org.xtext.airlineregistration.services.AirGrammarAccess;

@SuppressWarnings("all")
public class AirSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AirGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AirPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AirPackage.AIRLINE:
				sequence_Airline(context, (Airline) semanticObject); 
				return; 
			case AirPackage.AIRPORT:
				sequence_Airport(context, (Airport) semanticObject); 
				return; 
			case AirPackage.BAG_HANDLER:
				sequence_BagHandler(context, (BagHandler) semanticObject); 
				return; 
			case AirPackage.FLIGHT:
				sequence_Flight(context, (Flight) semanticObject); 
				return; 
			case AirPackage.FLIGHT_ATTENDANT:
				sequence_FlightAttendant(context, (FlightAttendant) semanticObject); 
				return; 
			case AirPackage.GATE_PERSONNEL:
				sequence_GatePersonnel(context, (GatePersonnel) semanticObject); 
				return; 
			case AirPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AirPackage.PILOT:
				sequence_Pilot(context, (Pilot) semanticObject); 
				return; 
			case AirPackage.SCHEDULE:
				sequence_Schedule(context, (Schedule) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns Airline
	 *     Airline returns Airline
	 *
	 * Constraint:
	 *     (name=ID description=STRING)
	 * </pre>
	 */
	protected void sequence_Airline(ISerializationContext context, Airline semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AirPackage.Literals.ENTITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirPackage.Literals.ENTITY__NAME));
			if (transientValues.isValueTransient(semanticObject, AirPackage.Literals.AIRLINE__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirPackage.Literals.AIRLINE__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAirlineAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAirlineAccess().getDescriptionSTRINGTerminalRuleCall_2_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns Airport
	 *     Airport returns Airport
	 *
	 * Constraint:
	 *     (code=ID name=STRING location=STRING)
	 * </pre>
	 */
	protected void sequence_Airport(ISerializationContext context, Airport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AirPackage.Literals.AIRPORT__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirPackage.Literals.AIRPORT__CODE));
			if (transientValues.isValueTransient(semanticObject, AirPackage.Literals.ENTITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirPackage.Literals.ENTITY__NAME));
			if (transientValues.isValueTransient(semanticObject, AirPackage.Literals.AIRPORT__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirPackage.Literals.AIRPORT__LOCATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAirportAccess().getCodeIDTerminalRuleCall_1_0(), semanticObject.getCode());
		feeder.accept(grammarAccess.getAirportAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAirportAccess().getLocationSTRINGTerminalRuleCall_3_0(), semanticObject.getLocation());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns BagHandler
	 *     Employee returns BagHandler
	 *     BagHandler returns BagHandler
	 *
	 * Constraint:
	 *     (name=ID airport=[Airline|ID])
	 * </pre>
	 */
	protected void sequence_BagHandler(ISerializationContext context, BagHandler semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AirPackage.Literals.ENTITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirPackage.Literals.ENTITY__NAME));
			if (transientValues.isValueTransient(semanticObject, AirPackage.Literals.BAG_HANDLER__AIRPORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirPackage.Literals.BAG_HANDLER__AIRPORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBagHandlerAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBagHandlerAccess().getAirportAirlineIDTerminalRuleCall_3_0_1(), semanticObject.eGet(AirPackage.Literals.BAG_HANDLER__AIRPORT, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns FlightAttendant
	 *     Employee returns FlightAttendant
	 *     FlightAttendant returns FlightAttendant
	 *
	 * Constraint:
	 *     (name=ID aireline=[Airline|ID])
	 * </pre>
	 */
	protected void sequence_FlightAttendant(ISerializationContext context, FlightAttendant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AirPackage.Literals.ENTITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirPackage.Literals.ENTITY__NAME));
			if (transientValues.isValueTransient(semanticObject, AirPackage.Literals.FLIGHT_ATTENDANT__AIRELINE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirPackage.Literals.FLIGHT_ATTENDANT__AIRELINE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFlightAttendantAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFlightAttendantAccess().getAirelineAirlineIDTerminalRuleCall_3_0_1(), semanticObject.eGet(AirPackage.Literals.FLIGHT_ATTENDANT__AIRELINE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns Flight
	 *     Flight returns Flight
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         from=[Airport|ID] 
	 *         to=[Airport|ID] 
	 *         airline=[Airline|ID] 
	 *         time=STRING 
	 *         pilot=[Pilot|ID] 
	 *         staff+=FlightAttendant 
	 *         staff+=FlightAttendant*
	 *     )
	 * </pre>
	 */
	protected void sequence_Flight(ISerializationContext context, Flight semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns GatePersonnel
	 *     Employee returns GatePersonnel
	 *     GatePersonnel returns GatePersonnel
	 *
	 * Constraint:
	 *     (name=ID airport=[Airport|ID])
	 * </pre>
	 */
	protected void sequence_GatePersonnel(ISerializationContext context, GatePersonnel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AirPackage.Literals.ENTITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirPackage.Literals.ENTITY__NAME));
			if (transientValues.isValueTransient(semanticObject, AirPackage.Literals.GATE_PERSONNEL__AIRPORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirPackage.Literals.GATE_PERSONNEL__AIRPORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGatePersonnelAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGatePersonnelAccess().getAirportAirportIDTerminalRuleCall_3_0_1(), semanticObject.eGet(AirPackage.Literals.GATE_PERSONNEL__AIRPORT, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     entities+=Entity+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns Pilot
	 *     Employee returns Pilot
	 *     Pilot returns Pilot
	 *
	 * Constraint:
	 *     (name=ID aireline=[Airline|ID])
	 * </pre>
	 */
	protected void sequence_Pilot(ISerializationContext context, Pilot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AirPackage.Literals.ENTITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirPackage.Literals.ENTITY__NAME));
			if (transientValues.isValueTransient(semanticObject, AirPackage.Literals.PILOT__AIRELINE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirPackage.Literals.PILOT__AIRELINE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPilotAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPilotAccess().getAirelineAirlineIDTerminalRuleCall_3_0_1(), semanticObject.eGet(AirPackage.Literals.PILOT__AIRELINE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns Schedule
	 *     Schedule returns Schedule
	 *
	 * Constraint:
	 *     (name=ID flights+=Flight flights+=Flight*)
	 * </pre>
	 */
	protected void sequence_Schedule(ISerializationContext context, Schedule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
